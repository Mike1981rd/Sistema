@model SistemaContable.Models.Rol

@{
    ViewData["Title"] = "Editar Rol";
    var permisosEstructura = ViewBag.PermisosEstructura as Dictionary<string, Dictionary<string, string>> ?? new Dictionary<string, Dictionary<string, string>>();
    var permisosSeleccionados = ViewBag.PermisosSeleccionados as List<string> ?? new List<string>();
}

@section Styles {
    <style>
        /* Page Background */
        body {
            background-color: #f8f7fa;
        }
        
        /* Main Container */
        .role-form-container {
            background: #fff;
            border-radius: 0.75rem;
            box-shadow: 0 0 20px rgba(0, 0, 0, 0.08);
            padding: 2rem 3rem 3rem 3rem;
            margin: 2rem auto;
            max-width: 1200px;
            width: 100%;
        }
        
        /* Header */
        .form-header {
            margin-bottom: 2rem;
        }
        
        .form-title {
            font-size: 1.5rem;
            font-weight: 600;
            color: #2c3e50;
            margin-bottom: 0.5rem;
        }
        
        .form-subtitle {
            color: #6c757d;
            font-size: 0.9375rem;
        }
        
        /* Form Fields */
        .form-row {
            display: grid;
            grid-template-columns: 1fr 200px;
            gap: 1.5rem;
            margin-bottom: 2rem;
        }
        
        .form-group {
            display: flex;
            flex-direction: column;
        }
        
        .form-label {
            font-weight: 500;
            color: #374151;
            margin-bottom: 0.5rem;
            font-size: 0.875rem;
        }
        
        .form-control {
            border: 1px solid #d1d5db;
            border-radius: 0.375rem;
            padding: 0.75rem;
            font-size: 0.9375rem;
            transition: all 0.2s;
            background: #fff;
        }
        
        .form-control:focus {
            outline: none;
            border-color: #7c3aed;
            box-shadow: 0 0 0 3px rgba(124, 58, 237, 0.1);
        }
        
        /* Permissions Section */
        .permissions-section {
            margin-bottom: 2rem;
        }
        
        .permissions-title {
            font-weight: 600;
            color: #374151;
            margin-bottom: 1rem;
            font-size: 1rem;
        }
        
        .permission-item {
            display: flex;
            align-items: center;
            justify-content: space-between;
            padding: 1rem 1.5rem 1rem 1rem;
            border-bottom: 1px solid #f3f4f6;
            transition: all 0.2s;
        }
        
        .permission-item .d-flex {
            cursor: pointer;
            flex: 1;
        }
        
        .category-toggle {
            margin-left: 1rem;
            cursor: pointer;
        }
        
        .permission-item:hover {
            background: #f9fafb;
            border-radius: 0.375rem;
        }
        
        .permission-arrow {
            color: #9ca3af;
            font-size: 0.875rem;
            margin-right: 1rem;
        }
        
        .permission-item:last-child {
            border-bottom: none;
        }
        
        .permission-name {
            color: #374151;
            font-weight: 500;
            font-size: 0.9375rem;
            margin-left: 1rem;
            margin-right: 1rem;
        }
        
        
        /* Permission Categories */
        .permission-category {
            margin-bottom: 0.5rem;
        }
        
        .permission-category.expanded .permission-item .permission-arrow {
            transform: rotate(90deg);
        }
        
        .permission-subcategories {
            display: none;
            padding-left: 2rem;
            padding-top: 0.5rem;
            padding-bottom: 0.5rem;
        }
        
        .permission-category.expanded .permission-subcategories {
            display: block;
        }
        
        .permission-subitem {
            display: flex;
            align-items: center;
            justify-content: space-between;
            padding: 1rem 0;
            border-bottom: 1px solid #f9fafb;
            margin-bottom: 0.5rem;
        }
        
        .permission-subitem:last-child {
            border-bottom: none;
        }
        
        .permission-subname {
            color: #6b7280;
            font-weight: 400;
            font-size: 0.875rem;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }
        
        /* Toggle Switch */
        .toggle-switch {
            position: relative;
            width: 44px;
            height: 24px;
            background: #d1d5db;
            border-radius: 12px;
            cursor: pointer;
            transition: background-color 0.3s ease;
        }
        
        .toggle-switch.active {
            background: #3b82f6;
        }
        
        .toggle-switch-slider {
            position: absolute;
            top: 2px;
            left: 2px;
            width: 20px;
            height: 20px;
            background: white;
            border-radius: 50%;
            transition: transform 0.3s ease;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
        }
        
        .toggle-switch.active .toggle-switch-slider {
            transform: translateX(20px);
        }
        
        .toggle-switch input {
            display: none;
        }
        
        
        /* Mobile responsive styles */
        @@media (max-width: 767px) {
            .form-card {
                margin-bottom: 1rem;
                box-shadow: 0 0.0625rem 0.125rem rgba(0, 0, 0, 0.05);
            }
            
            .form-card-header {
                padding: 1rem;
            }
            
            .form-card-body {
                padding: 1rem;
            }
            
            .form-card-title {
                font-size: 1rem;
            }
            
            /* Stack form fields on mobile */
            .col-md-8, .col-md-4 {
                margin-bottom: 0.5rem;
            }
            
            /* Make permission toggles more touch-friendly */
            .permission-item {
                padding: 1rem 0;
            }
            
            .toggle-switch {
                width: 44px;
                height: 24px;
            }
            
            .toggle-switch-slider {
                width: 18px;
                height: 18px;
            }
            
            .toggle-switch input:checked + .toggle-switch .toggle-switch-slider {
                transform: translateX(20px);
            }
            
            /* Sticky sidebar on mobile becomes fixed bottom */
            .position-sticky {
                position: fixed !important;
                bottom: 0;
                left: 0;
                right: 0;
                top: auto !important;
                z-index: 1030;
                background: white;
                border-top: 1px solid #dee2e6;
                box-shadow: 0 -2px 10px rgba(0, 0, 0, 0.1);
            }
            
            /* Add padding to account for fixed bottom bar */
            body {
                padding-bottom: 140px;
            }
            
            /* Permission category adjustments */
            .permission-category-header {
                padding: 0.75rem 1rem;
            }
            
            .permission-category-body {
                padding: 0.5rem 1rem;
            }
            
            .permission-category-title {
                font-size: 0.9375rem;
            }
            
            .permission-label {
                font-size: 0.875rem;
            }
            
            /* Adjust select all label */
            .select-all-label {
                font-size: 0.75rem;
            }
        }
        
        /* Tablet adjustments */
        @@media (min-width: 768px) and (max-width: 991px) {
            .col-lg-8 {
                margin-bottom: 2rem;
            }
        }
        
        .form-card-header {
            padding: 1.5rem;
            border-bottom: 1px solid #e3e6f0;
        }
        
        .form-card-title {
            font-size: 1.125rem;
            font-weight: 600;
            color: #2c3e50;
            margin: 0;
        }
        
        .form-card-body {
            padding: 1.5rem;
        }
        
        /* Permission Section */
        .permissions-section {
            margin-top: 2rem;
        }
        
        .permission-category {
            margin-bottom: 1.5rem;
            border: 1px solid #e3e6f0;
            border-radius: 0.5rem;
            overflow: hidden;
        }
        
        .permission-category-header {
            background: #f8f9fa;
            padding: 1rem 1.5rem;
            border-bottom: 1px solid #e3e6f0;
            cursor: pointer;
            user-select: none;
            display: flex;
            align-items: center;
            justify-content: space-between;
        }
        
        .permission-category-header:hover {
            background: #f1f3f4;
        }
        
        .permission-category-title {
            font-weight: 600;
            color: #2c3e50;
            margin: 0;
            display: flex;
            align-items: center;
        }
        
        .permission-category-title i {
            margin-right: 0.75rem;
            width: 20px;
            text-align: center;
            color: #6c757d;
        }
        
        .permission-category-toggle {
            color: #6c757d;
            transition: transform 0.3s ease;
        }
        
        .permission-category.expanded .permission-category-toggle {
            transform: rotate(90deg);
        }
        
        .permission-category-body {
            display: none;
            padding: 1rem 1.5rem;
        }
        
        .permission-category.expanded .permission-category-body {
            display: block;
        }
        
        .permission-item {
            padding: 0.75rem 0;
            border-bottom: 1px solid #f3f2f7;
            display: flex;
            align-items: center;
            justify-content: space-between;
        }
        
        .permission-item:last-child {
            border-bottom: none;
        }
        
        .permission-label {
            color: #5e5873;
            margin: 0;
            font-size: 0.9375rem;
            cursor: pointer;
            flex: 1;
            display: flex;
            align-items: center;
        }
        
        .permission-label i {
            margin-right: 0.5rem;
            font-size: 0.875rem;
            color: #a8aab3;
        }
        
        /* Custom Toggle Switch */
        .toggle-switch {
            position: relative;
            width: 50px;
            height: 26px;
            background: #e3e3e3;
            border-radius: 34px;
            cursor: pointer;
            transition: background-color 0.3s;
        }
        
        .toggle-switch input {
            display: none;
        }
        
        .toggle-switch-slider {
            position: absolute;
            top: 3px;
            left: 3px;
            width: 20px;
            height: 20px;
            background: white;
            border-radius: 50%;
            transition: transform 0.3s;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
        }
        
        .toggle-switch input:checked + .toggle-switch {
            background: #7367f0;
        }
        
        .toggle-switch input:checked + .toggle-switch .toggle-switch-slider {
            transform: translateX(24px);
        }
        
        /* Form Controls */
        .form-label {
            font-weight: 500;
            color: #5e5873;
            margin-bottom: 0.5rem;
        }
        
        .form-control, .form-select {
            border: 1px solid #d8d6de;
            border-radius: 0.375rem;
            transition: border-color 0.15s ease-in-out;
        }
        
        .form-control:focus, .form-select:focus {
            border-color: #7367f0;
            box-shadow: 0 3px 10px 0 rgba(34, 41, 47, 0.1);
        }
        
        /* Buttons */
        .btn-primary {
            background: #7367f0;
            border-color: #7367f0;
            font-weight: 500;
            padding: 0.75rem 1.5rem;
        }
        
        .btn-primary:hover {
            background: #5e50ee;
            border-color: #5e50ee;
        }
        
        .btn-secondary {
            background: #82868b;
            border-color: #82868b;
            font-weight: 500;
            padding: 0.75rem 1.5rem;
        }
        
        .btn-secondary:hover {
            background: #6c7075;
            border-color: #6c7075;
        }
        
        /* Select All Toggle */
        .select-all-wrapper {
            display: flex;
            align-items: center;
            padding: 0.5rem 0;
            margin-bottom: 0.5rem;
        }
        
        .select-all-label {
            margin-left: 0.5rem;
            font-size: 0.875rem;
            color: #6c757d;
        }
        
        /* Info badges */
        .info-badge {
            display: inline-block;
            padding: 0.25rem 0.75rem;
            background: #e3f2fd;
            color: #1976d2;
            border-radius: 2rem;
            font-size: 0.75rem;
            font-weight: 500;
        }
        
        /* Force Bootstrap button colors - Override any custom CSS */
        .btn-primary {
            background-color: #0d6efd !important;
            border-color: #0d6efd !important;
            color: white !important;
        }
        
        .btn-primary:hover {
            background-color: #0b5ed7 !important;
            border-color: #0a58ca !important;
            color: white !important;
        }
        
        .btn-secondary {
            background-color: #6c757d !important;
            border-color: #6c757d !important;
            color: white !important;
        }
        
        .btn-secondary:hover {
            background-color: #5c636a !important;
            border-color: #565e64 !important;
            color: white !important;
        }
    </style>
}

<div class="container-fluid p-0">
    <!-- Encabezado con título y breadcrumb -->
    <div class="row mb-4">
        <div class="col-12">
            <h1 class="h4">Editar Rol</h1>
            <nav class="breadcrumb-container d-none d-sm-block d-lg-inline-block" aria-label="breadcrumb">
                <ol class="breadcrumb pt-0">
                    <li class="breadcrumb-item">
                        <a asp-controller="Home" asp-action="Index">Dashboard</a>
                    </li>
                    <li class="breadcrumb-item">
                        <a asp-controller="Roles" asp-action="Index">Roles</a>
                    </li>
                    <li class="breadcrumb-item active">Editar</li>
                </ol>
            </nav>
        </div>
    </div>

    <div class="role-form-container">
        <form asp-action="Edit" method="post">
            <div asp-validation-summary="ModelOnly" class="alert alert-danger"></div>
            <input type="hidden" asp-for="Id" />
            
            <!-- Header -->
            <div class="form-header">
                <h1 class="form-title">Agregar/Editar rol</h1>
                <p class="form-subtitle">Administrar roles</p>
            </div>
            
            <!-- Form Fields -->
            <div class="form-row">
                <div class="form-group">
                    <label asp-for="Nombre" class="form-label">Nombre de rol*</label>
                    <input asp-for="Nombre" class="form-control" placeholder="Ingrese nombre del rol" />
                    <span asp-validation-for="Nombre" class="text-danger"></span>
                </div>
                <div class="form-group">
                    <label asp-for="Prioridad" class="form-label">Prioridad*</label>
                    <input asp-for="Prioridad" type="number" class="form-control" min="0" max="100" />
                    <span asp-validation-for="Prioridad" class="text-danger"></span>
                </div>
            </div>
            
            <!-- Permissions Section -->
            <div class="permissions-section">
                <h3 class="permissions-title">Permisos</h3>
                
                @{
                    // Usar la estructura oficial de permisos del sistema
                    var permisosEstructura = ViewBag.PermisosEstructura as Dictionary<string, Dictionary<string, string>> ?? SistemaContable.Models.PermisosSistema.EstructuraPermisos;
                    
                    // Get selected permissions for this role (from ViewBag or Model)
                    var selectedPermissions = permisosSeleccionados ?? new List<string>();
                }
                
                @foreach (var category in permisosEstructura)
                {
                    <div class="permission-category" id="category-@category.Key.Replace(" ", "")">
                        <div class="permission-item">
                            <div class="d-flex align-items-center" onclick="toggleCategory('@category.Key.Replace(" ", "")')">
                                <span class="permission-name">@category.Key</span>
                                <i class="fas fa-chevron-right permission-arrow"></i>
                            </div>
                            <div class="toggle-switch category-toggle" onclick="toggleCategoryPermissions(this, '@category.Key.Replace(" ", "")')">
                                <input type="checkbox" class="category-checkbox" />
                                <div class="toggle-switch-slider"></div>
                            </div>
                        </div>
                        <div class="permission-subcategories">
                            @foreach (var subcategory in category.Value)
                            {
                                var permissionKey = subcategory.Key;
                                var isChecked = selectedPermissions.Contains(permissionKey);
                                
                                <div class="permission-subitem">
                                    <span class="permission-subname">@subcategory.Value</span>
                                    <div class="toggle-switch @(isChecked ? "active" : "")" onclick="togglePermission(this, '@category.Key', '@subcategory.Value')">
                                        <input type="checkbox" name="permisosSeleccionados" value="@permissionKey" @(isChecked ? "checked" : "") />
                                        <div class="toggle-switch-slider"></div>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                }
            </div>
            
            <!-- Form Actions -->
            <div class="d-flex justify-content-end mt-4">
                <a asp-action="Index" class="btn btn-secondary me-2">Cancelar</a>
                <button type="submit" class="btn btn-primary">Guardar</button>
            </div>
        </form>
    </div>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
    
    <script>
        function toggleCategory(categoryId) {
            const categoryElement = document.getElementById('category-' + categoryId);
            categoryElement.classList.toggle('expanded');
        }
        
        function togglePermission(toggleElement, category, permission) {
            const checkbox = toggleElement.querySelector('input[type="checkbox"]');
            checkbox.checked = !checkbox.checked;
            toggleElement.classList.toggle('active', checkbox.checked);
            
            // Actualizar el estado del toggle de categoría
            const categoryId = category.replace(/\s/g, '');
            updateCategoryToggle(categoryId);
        }
        
        // Función para toggle de toda una categoría
        function toggleCategoryPermissions(categoryToggle, categoryId) {
            const categoryElement = document.getElementById('category-' + categoryId);
            const categoryCheckbox = categoryToggle.querySelector('input[type="checkbox"]');
            
            // Toggle del checkbox principal
            categoryCheckbox.checked = !categoryCheckbox.checked;
            categoryToggle.classList.toggle('active', categoryCheckbox.checked);
            
            // Encontrar todos los toggles de permisos en esta categoría
            const permissionToggles = categoryElement.querySelectorAll('.permission-subcategories .toggle-switch');
            
            // Aplicar el estado a todos los permisos de la categoría
            permissionToggles.forEach(toggle => {
                const checkbox = toggle.querySelector('input[type="checkbox"]');
                checkbox.checked = categoryCheckbox.checked;
                toggle.classList.toggle('active', categoryCheckbox.checked);
            });
            
            // Expandir la categoría si se está marcando
            if (categoryCheckbox.checked) {
                categoryElement.classList.add('expanded');
            }
        }
        
        // Función para actualizar el estado del toggle de categoría cuando se cambian permisos individuales
        function updateCategoryToggle(categoryId) {
            const categoryElement = document.getElementById('category-' + categoryId);
            const categoryToggle = categoryElement.querySelector('.category-toggle');
            const categoryCheckbox = categoryToggle.querySelector('input[type="checkbox"]');
            const permissionCheckboxes = categoryElement.querySelectorAll('.permission-subcategories input[type="checkbox"]');
            
            const totalPermissions = permissionCheckboxes.length;
            const checkedPermissions = Array.from(permissionCheckboxes).filter(cb => cb.checked).length;
            
            // Si todos están marcados, marcar el toggle de categoría
            if (checkedPermissions === totalPermissions && totalPermissions > 0) {
                categoryCheckbox.checked = true;
                categoryToggle.classList.add('active');
            }
            // Si ninguno está marcado, desmarcar el toggle de categoría
            else if (checkedPermissions === 0) {
                categoryCheckbox.checked = false;
                categoryToggle.classList.remove('active');
            }
            // Si algunos están marcados, mantener estado indeterminado
            else {
                categoryCheckbox.checked = false;
                categoryToggle.classList.remove('active');
            }
        }
        
        // Initialize toggle states on page load and expand categories with selected permissions
        document.addEventListener('DOMContentLoaded', function() {
            document.querySelectorAll('.toggle-switch').forEach(toggle => {
                const checkbox = toggle.querySelector('input[type="checkbox"]');
                if (checkbox.checked) {
                    toggle.classList.add('active');
                }
            });
            
            // Inicializar el estado de los toggles de categoría
            document.querySelectorAll('.permission-category').forEach(category => {
                const categoryId = category.id.replace('category-', '');
                updateCategoryToggle(categoryId);
            });
            
            // Auto-expand categories that have selected permissions
            document.querySelectorAll('.permission-category').forEach(category => {
                const hasChecked = category.querySelector('.permission-subcategories .toggle-switch.active');
                if (hasChecked) {
                    category.classList.add('expanded');
                }
            });
        });
    </script>
}