@model SistemaContable.Models.ViewModels.ItemViewModel
@{
    ViewData["Title"] = "Editar Item";
}

<div class="container-fluid p-0">
    <!-- Sección de encabezado con título y breadcrumb -->
    <div class="row mb-4">
        <div class="col-12">
            <h1 class="h4">Editar Item</h1>
            <nav class="breadcrumb-container d-none d-sm-block d-lg-inline-block" aria-label="breadcrumb">
                <ol class="breadcrumb pt-0">
                    <li class="breadcrumb-item">
                        <a asp-controller="Home" asp-action="Index">Dashboard</a>
                    </li>
                    <li class="breadcrumb-item">
                        <a asp-action="Index">Items</a>
                    </li>
                    <li class="breadcrumb-item active">Editar</li>
                </ol>
            </nav>
        </div>
    </div>

    <form asp-action="Edit" method="post" enctype="multipart/form-data" id="itemForm">
        <div asp-validation-summary="ModelOnly" class="text-danger"></div>
        <input type="hidden" asp-for="Id" />

        <!-- Nav tabs con estilo Underline -->
        <div class="card mb-4">
            <div class="card-body">
                <ul class="nav nav-tabs-underline" role="tablist">
                    <li class="nav-item" role="presentation">
                        <a class="nav-link active" href="#tab-info" role="tab" data-bs-toggle="tab">
                            Información
                        </a>
                    </li>
                    <li class="nav-item" role="presentation">
                        <a class="nav-link" href="#tab-compras" role="tab" data-bs-toggle="tab">
                            Compras
                        </a>
                    </li>
                    <li class="nav-item" role="presentation">
                        <a class="nav-link" href="#tab-contabilidad" role="tab" data-bs-toggle="tab">
                            Contabilidad
                        </a>
                    </li>
                    <li class="nav-item" role="presentation">
                        <a class="nav-link" href="#tab-taras" role="tab" data-bs-toggle="tab">
                            Taras
                        </a>
                    </li>
                    <li class="nav-item" role="presentation">
                        <a class="nav-link" href="#tab-venta" role="tab" data-bs-toggle="tab">
                            Producto de Venta
                        </a>
                    </li>
                </ul>

                <!-- Tab content - Inline como en Create -->
                <div class="tab-content mt-4">
                    <!-- Tab Información -->
                    <div class="tab-pane fade show active" id="tab-info" role="tabpanel">
                        <div class="row">
                            <div class="col-md-8">
                                <div class="row mb-3">
                                    <div class="col-md-6">
                                        <label asp-for="Codigo" class="form-label">Código (Automático)</label>
                                        <input asp-for="Codigo" class="form-control bg-light" readonly />
                                        <span asp-validation-for="Codigo" class="text-danger"></span>
                                    </div>
                                    <div class="col-md-6">
                                        <label asp-for="CodigoBarras" class="form-label">Código de Barras</label>
                                        <div class="input-group">
                                            <input asp-for="CodigoBarras" class="form-control" />
                                            <button type="button" class="btn btn-outline-secondary" id="generarCodigoBarras" title="Generar código">
                                                <i class="fas fa-barcode"></i>
                                            </button>
                                        </div>
                                        <span asp-validation-for="CodigoBarras" class="text-danger"></span>
                                    </div>
                                </div>
                                <div class="row mb-3">
                                    <div class="col-md-12">
                                        <label asp-for="Nombre" class="form-label">Nombre *</label>
                                        <input asp-for="Nombre" class="form-control" required />
                                        <span asp-validation-for="Nombre" class="text-danger"></span>
                                    </div>
                                </div>
                                <div class="row mb-3">
                                    <div class="col-md-6">
                                        <label asp-for="CategoriaId" class="form-label">Categoría *</label>
                                        <select asp-for="CategoriaId" asp-items="Model.CategoriasDisponibles" class="form-select select2-categoria" required>
                                            <option value="">Seleccione una categoría</option>
                                        </select>
                                        <span asp-validation-for="CategoriaId" class="text-danger"></span>
                                    </div>
                                    <div class="col-md-6">
                                        <label asp-for="MarcaId" class="form-label">Marca</label>
                                        <select asp-for="MarcaId" asp-items="Model.MarcasDisponibles" class="form-select select2-marca">
                                            <option value="">Genérica</option>
                                        </select>
                                        <span asp-validation-for="MarcaId" class="text-danger"></span>
                                    </div>
                                </div>
                                <div class="row mb-3">
                                    <div class="col-md-12">
                                        <label asp-for="Descripcion" class="form-label">Descripción</label>
                                        <textarea asp-for="Descripcion" class="form-control" rows="3"></textarea>
                                        <span asp-validation-for="Descripcion" class="text-danger"></span>
                                    </div>
                                </div>
                                <div class="row mb-3">
                                    <div class="col-md-6">
                                        <label asp-for="ImpuestoId" class="form-label">Impuesto</label>
                                        <select asp-for="ImpuestoId" asp-items="Model.ImpuestosDisponibles" class="form-select select2">
                                            <option value="">Seleccione un impuesto</option>
                                        </select>
                                        <span asp-validation-for="ImpuestoId" class="text-danger"></span>
                                    </div>
                                    <div class="col-md-6">
                                        <label asp-for="Rendimiento" class="form-label">Rendimiento (%)</label>
                                        <input asp-for="Rendimiento" class="form-control" type="number" step="0.01" min="0" max="100" value="100" data-decimal="@Model.SeparadorDecimal" />
                                        <small class="text-muted">Porcentaje del producto que se mantiene después de procesarlo</small>
                                        <span asp-validation-for="Rendimiento" class="text-danger"></span>
                                    </div>
                                </div>
                                <div class="row mb-3">
                                    <div class="col-md-6">
                                        <label asp-for="Estado" class="form-label">Estado</label>
                                        <select asp-for="Estado" class="form-select">
                                            <option value="true" selected>Activo</option>
                                            <option value="false">Inactivo</option>
                                        </select>
                                        <span asp-validation-for="Estado" class="text-danger"></span>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="card">
                                    <div class="card-body">
                                        <h5 class="card-title">Imagen</h5>
                                        <div class="modern-image-upload">
                                            <!-- Vista previa de imagen -->
                                            <div class="image-preview mb-3 text-center">
                                                @if (string.IsNullOrEmpty(Model.ImagenUrl))
                                                {
                                                    <div class="no-image-container p-4 border rounded bg-light d-flex align-items-center justify-content-center" style="height: 200px;">
                                                        <div class="text-center text-muted">
                                                            <i class="fas fa-image fa-4x mb-3"></i>
                                                            <p>No hay imagen</p>
                                                        </div>
                                                    </div>
                                                }
                                                else
                                                {
                                                    <img src="@Model.ImagenUrl" alt="Vista previa" class="img-fluid rounded shadow-sm" style="max-height: 200px;" />
                                                }
                                            </div>
                                            
                                            <!-- Selector de archivo -->
                                            <div class="file-selector mb-3">
                                                <div class="input-group">
                                                    <input type="file" asp-for="ItemImage" class="form-control" accept="image/*" id="imageFile">
                                                    <button class="btn btn-outline-danger" type="button" id="clearImageBtn" style="display: @(!string.IsNullOrEmpty(Model.ImagenUrl) ? "inline-flex" : "none")">
                                                        <i class="fas fa-times"></i>
                                                    </button>
                                                </div>
                                            </div>
                                            
                                            <!-- Información sobre tipos de archivo -->
                                            <div class="mt-2 text-muted small">
                                                <ul class="ps-3 mb-0">
                                                    <li>Formatos: JPG, PNG o GIF</li>
                                                    <li>Tamaño máximo: 800KB</li>
                                                    <li>Dimensiones recomendadas: 800x800px</li>
                                                </ul>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Tab Compras -->
                    <div class="tab-pane fade" id="tab-compras" role="tabpanel">
                        @await Html.PartialAsync("_TabCompras", Model)
                    </div>

                    <!-- Tab Contabilidad -->
                    <div class="tab-pane fade" id="tab-contabilidad" role="tabpanel">
                        <div id="contabilidad-container">
                            @await Html.PartialAsync("_TabContabilidad", Model)
                        </div>
                    </div>

                    <!-- Tab Taras -->
                    <div class="tab-pane fade" id="tab-taras" role="tabpanel">
                        @await Html.PartialAsync("_TabTaras", Model)
                    </div>

                    <!-- Tab Producto de Venta -->
                    <div class="tab-pane fade" id="tab-venta" role="tabpanel">
                        @await Html.PartialAsync("_TabProductoVenta", Model)
                    </div>
                </div>
            </div>
        </div>

        <!-- Botones de acción -->
        <div class="card mb-4">
            <div class="card-body">
                <div class="d-flex justify-content-end gap-2">
                    <a asp-action="Index" class="btn btn-secondary">Cancelar</a>
                    <button type="submit" class="btn btn-primary">Guardar Cambios</button>
                </div>
            </div>
        </div>
    </form>
</div>

<!-- Offcanvas para crear/editar categoría -->
<div class="offcanvas offcanvas-end offcanvas-lg bg-white border-primary" tabindex="-1" id="offcanvasCategoria" aria-labelledby="offcanvasCategoriaLabel">
    <div class="offcanvas-header">
        <h5 id="offcanvasCategoriaLabel">Nueva Categoría</h5>
        <button type="button" class="btn-close text-reset" data-bs-dismiss="offcanvas" aria-label="Close"></button>
    </div>
    <div class="offcanvas-body">
        <div id="formCategoriaContainer">
            <!-- Se cargará dinámicamente -->
        </div>
    </div>
</div>

<!-- Offcanvas para crear/editar marca -->
<div class="offcanvas offcanvas-end offcanvas-lg bg-white border-primary" tabindex="-1" id="offcanvasMarca" aria-labelledby="offcanvasMarcaLabel">
    <div class="offcanvas-header">
        <h5 id="offcanvasMarcaLabel">Nueva Marca</h5>
        <button type="button" class="btn-close text-reset" data-bs-dismiss="offcanvas" aria-label="Close"></button>
    </div>
    <div class="offcanvas-body">
        <div id="formMarcaContainer">
            <!-- Se cargará dinámicamente -->
        </div>
    </div>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
    
    <!-- jQuery y jQuery UI necesarios para los scripts -->
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://code.jquery.com/ui/1.13.2/jquery-ui.min.js"></script>
    
    <!-- Select2 -->
    <link href="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/css/select2.min.css" rel="stylesheet" />
    <link href="https://cdn.jsdelivr.net/npm/select2-bootstrap-5-theme@1.3.0/dist/select2-bootstrap-5-theme.min.css" rel="stylesheet" />
    <link href="~/css/select2-fixes.css" rel="stylesheet" />
    <script src="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/js/select2.min.js"></script>
    
    <!-- SweetAlert para notificaciones -->
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    
    <!-- JsBarcode para códigos de barras -->
    <script src="https://cdn.jsdelivr.net/npm/jsbarcode@3.11.5/dist/JsBarcode.all.min.js"></script>
    
    <!-- Scripts específicos de Item -->
    <script src="~/js/items/item-create-fixed-v2.js"></script>
    <script src="~/js/items/containers-edit.js"></script>
    
    <script>
        $(document).ready(function() {
            console.log('Edit Item page loaded');
            const itemId = '@Model.Id';
            
            // Inicializar Select2 para Categoría
            const categoriaId = '@Model.CategoriaId';
            const categoriaText = $('#CategoriaId option:selected').text();
            $('.select2-categoria').select2({
                theme: 'bootstrap-5',
                placeholder: 'Seleccione una categoría',
                allowClear: false,
                width: '100%',
                ajax: {
                    url: '/Categoria/Buscar',
                    dataType: 'json',
                    delay: 250,
                    data: function(params) {
                        return {
                            term: params.term || ''
                        };
                    },
                    processResults: function(data) {
                        return {
                            results: data.results || []
                        };
                    },
                    cache: true
                },
                tags: true,
                createTag: function(params) {
                    const term = $.trim(params.term);
                    if (term === '') {
                        return null;
                    }
                    return {
                        id: 'CREATE:' + term,
                        text: term + ' (Crear nueva)',
                        newTag: true
                    };
                }
            });
            
            // Si hay una categoría seleccionada, mantenerla
            if (categoriaId && categoriaText) {
                const option = new Option(categoriaText, categoriaId, true, true);
                $('#CategoriaId').append(option).trigger('change');
            }
            
            // Manejar creación de nueva categoría
            $('#CategoriaId').on('select2:select', function(e) {
                const data = e.params.data;
                if (data.newTag) {
                    // Abrir offcanvas para crear nueva categoría
                    const categoriaName = data.text.replace(' (Crear nueva)', '');
                    cargarFormularioCategoria('crear', null, categoriaName);
                }
            });
            
            // Inicializar Select2 para Marca
            const marcaId = '@Model.MarcaId';
            const marcaText = $('#MarcaId option:selected').text();
            $('.select2-marca').select2({
                theme: 'bootstrap-5',
                placeholder: 'Genérica',
                allowClear: true,
                width: '100%',
                ajax: {
                    url: '/Marca/Buscar',
                    dataType: 'json',
                    delay: 250,
                    data: function(params) {
                        return {
                            term: params.term || ''
                        };
                    },
                    processResults: function(data) {
                        return {
                            results: data.results || []
                        };
                    },
                    cache: true
                },
                tags: true,
                createTag: function(params) {
                    const term = $.trim(params.term);
                    if (term === '') {
                        return null;
                    }
                    return {
                        id: 'CREATE:' + term,
                        text: term + ' (Crear nueva)',
                        newTag: true
                    };
                }
            });
            
            // Si hay una marca seleccionada, mantenerla
            if (marcaId && marcaText && marcaText !== 'Genérica') {
                const option = new Option(marcaText, marcaId, true, true);
                $('#MarcaId').append(option).trigger('change');
            }
            
            // Manejar creación de nueva marca
            $('#MarcaId').on('select2:select', function(e) {
                const data = e.params.data;
                if (data.newTag) {
                    // Abrir offcanvas para crear nueva marca
                    const marcaName = data.text.replace(' (Crear nueva)', '');
                    cargarFormularioMarca('crear', null, marcaName);
                }
            });
            
            // Inicializar Select2 para Impuesto
            const impuestoId = '@Model.ImpuestoId';
            const impuestoText = $('#ImpuestoId option:selected').text();
            $('#ImpuestoId').select2({
                theme: 'bootstrap-5',
                placeholder: 'Seleccione un impuesto',
                allowClear: true,
                width: '100%',
                ajax: {
                    url: '/Impuestos/Buscar',
                    dataType: 'json',
                    delay: 250,
                    data: function(params) {
                        return {
                            term: params.term || ''
                        };
                    },
                    processResults: function(data) {
                        return {
                            results: data.results || []
                        };
                    },
                    cache: true
                }
            });
            
            // Si hay un impuesto seleccionado, mantenerlo
            if (impuestoId && impuestoText) {
                const option = new Option(impuestoText, impuestoId, true, true);
                $('#ImpuestoId').append(option).trigger('change');
            }
            
            // Variable para rastrear si los proveedores han sido cargados
            let proveedoresCargados = false;
            
            // Inicializar Select2 para el dropdown de proveedores
            $('#ProveedorId').select2({
                theme: 'bootstrap-5',
                placeholder: 'Seleccione o cree un proveedor',
                allowClear: true,
                width: '100%',
                ajax: {
                    url: '/Proveedores/Buscar',
                    dataType: 'json',
                    delay: 250,
                    data: function(params) {
                        return {
                            term: params.term || ''
                        };
                    },
                    processResults: function(data) {
                        return {
                            results: data.results || []
                        };
                    },
                    cache: true
                },
                tags: true,
                createTag: function(params) {
                    const term = $.trim(params.term);
                    if (term === '') {
                        return null;
                    }
                    return {
                        id: 'CREATE:' + term,
                        text: term + ' (Crear nuevo)',
                        newTag: true
                    };
                }
            });
            
            // Manejar creación de nuevo proveedor
            $('#ProveedorId').on('select2:select', function(e) {
                const data = e.params.data;
                if (data.newTag) {
                    // Abrir offcanvas para crear nuevo proveedor
                    const proveedorName = data.text.replace(' (Crear nuevo)', '');
                    cargarFormularioProveedor('crear', null, proveedorName);
                }
            });
            
            // Función para cargar formulario de proveedor en offcanvas
            function cargarFormularioProveedor(accion, id = null, nombre = '') {
                let url = accion === 'crear' ? '/Proveedores/Create' : `/Proveedores/Edit/${id}`;
                
                $.ajax({
                    url: url,
                    type: 'GET',
                    success: function(data) {
                        $('#formProveedorContainer').html(data);
                        
                        // Si es crear y tenemos un nombre, establecerlo
                        if (accion === 'crear' && nombre) {
                            $('#formProveedorContainer').find('#NombreRazonSocial').val(nombre);
                        }
                        
                        $('#offcanvasProveedorLabel').text(accion === 'crear' ? 'Nuevo Proveedor' : 'Editar Proveedor');
                        
                        const offcanvas = new bootstrap.Offcanvas(document.getElementById('offcanvasProveedor'));
                        offcanvas.show();
                        
                        // Manejar el guardado del proveedor
                        $('#formProveedorContainer').find('form').on('submit', function(e) {
                            e.preventDefault();
                            guardarProveedor($(this), offcanvas);
                        });
                    },
                    error: function() {
                        Swal.fire('Error', 'No se pudo cargar el formulario', 'error');
                    }
                });
            }
            
            // Función para guardar proveedor
            function guardarProveedor($form, offcanvas) {
                $.ajax({
                    url: $form.attr('action'),
                    type: $form.attr('method'),
                    data: $form.serialize(),
                    success: function(response) {
                        if (response.success) {
                            offcanvas.hide();
                            Swal.fire('Éxito', 'Proveedor guardado correctamente', 'success');
                            
                            // Agregar el nuevo proveedor al select2
                            const newOption = new Option(response.proveedor.nombreRazonSocial, response.proveedor.id, true, true);
                            $('#ProveedorId').append(newOption).trigger('change');
                        } else {
                            Swal.fire('Error', response.message || 'Error al guardar', 'error');
                        }
                    },
                    error: function() {
                        Swal.fire('Error', 'Error al guardar el proveedor', 'error');
                    }
                });
            }
            
            // Función para cargar formulario de categoría en offcanvas
            function cargarFormularioCategoria(accion, id = null, nombre = '') {
                let url = accion === 'crear' ? '/Categoria/_CreatePartial' : `/Categoria/_EditPartial/${id}`;
                
                $.ajax({
                    url: url,
                    type: 'GET',
                    success: function(data) {
                        $('#formCategoriaContainer').html(data);
                        
                        // Si es crear y tenemos un nombre, establecerlo
                        if (accion === 'crear' && nombre) {
                            $('#formCategoriaContainer').find('#Nombre').val(nombre);
                        }
                        
                        $('#offcanvasCategoriaLabel').text(accion === 'crear' ? 'Nueva Categoría' : 'Editar Categoría');
                        
                        const offcanvas = new bootstrap.Offcanvas(document.getElementById('offcanvasCategoria'));
                        offcanvas.show();
                        
                        // Manejar el guardado de la categoría
                        $('#formCategoriaContainer').find('form').on('submit', function(e) {
                            e.preventDefault();
                            guardarCategoria($(this), offcanvas);
                        });
                    },
                    error: function() {
                        Swal.fire('Error', 'No se pudo cargar el formulario', 'error');
                    }
                });
            }
            
            // Función para guardar categoría
            function guardarCategoria($form, offcanvas) {
                $.ajax({
                    url: $form.attr('action'),
                    type: $form.attr('method'),
                    data: $form.serialize(),
                    success: function(response) {
                        if (response.success) {
                            offcanvas.hide();
                            Swal.fire('Éxito', 'Categoría guardada correctamente', 'success');
                            
                            // Agregar la nueva categoría al select2
                            const newOption = new Option(response.categoria.nombre, response.categoria.id, true, true);
                            $('#CategoriaId').append(newOption).trigger('change');
                        } else {
                            Swal.fire('Error', response.message || 'Error al guardar', 'error');
                        }
                    },
                    error: function() {
                        Swal.fire('Error', 'Error al guardar la categoría', 'error');
                    }
                });
            }
            
            // Función para cargar formulario de marca en offcanvas
            function cargarFormularioMarca(accion, id = null, nombre = '') {
                let url = accion === 'crear' ? '/Marca/_Create' : `/Marca/_Edit?id=${id}`;
                
                $.ajax({
                    url: url,
                    type: 'GET',
                    success: function(data) {
                        $('#formMarcaContainer').html(data);
                        
                        // Si es crear y tenemos un nombre, establecerlo
                        if (accion === 'crear' && nombre) {
                            $('#formMarcaContainer').find('#Nombre').val(nombre);
                        }
                        
                        $('#offcanvasMarcaLabel').text(accion === 'crear' ? 'Nueva Marca' : 'Editar Marca');
                        
                        const offcanvas = new bootstrap.Offcanvas(document.getElementById('offcanvasMarca'));
                        offcanvas.show();
                        
                        // Manejar el guardado de la marca
                        $('#formMarcaContainer').find('form').on('submit', function(e) {
                            e.preventDefault();
                            guardarMarca($(this), offcanvas);
                        });
                    },
                    error: function() {
                        Swal.fire('Error', 'No se pudo cargar el formulario', 'error');
                    }
                });
            }
            
            // Función para guardar marca
            function guardarMarca($form, offcanvas) {
                $.ajax({
                    url: $form.attr('action'),
                    type: $form.attr('method'),
                    data: $form.serialize(),
                    success: function(response) {
                        if (response.success) {
                            offcanvas.hide();
                            Swal.fire('Éxito', 'Marca guardada correctamente', 'success');
                            
                            // Agregar la nueva marca al select2
                            const newOption = new Option(response.marca.nombre, response.marca.id, true, true);
                            $('#MarcaId').append(newOption).trigger('change');
                        } else {
                            Swal.fire('Error', response.message || 'Error al guardar', 'error');
                        }
                    },
                    error: function() {
                        Swal.fire('Error', 'Error al guardar la marca', 'error');
                    }
                });
            }
            
            // Inicializar select2 para proveedores (debe existir en _TabProveedores.cshtml)
            setTimeout(function() {
                if (window.initializeProveedores) {
                    window.initializeProveedores();
                    
                    // Cargar proveedores existentes para este item
                    if (!proveedoresCargados) {
                        proveedoresCargados = true;
                        cargarProveedoresDelItem(itemId);
                    }
                }
            }, 500);
            
            // Función para cargar proveedores del item
            function cargarProveedoresDelItem(itemId) {
                console.log('Cargando proveedores para item:', itemId);
                
                // Esperar a que cargarProveedoresExistentes esté disponible
                const waitForFunction = setInterval(function() {
                    if (window.cargarProveedoresExistentes) {
                        clearInterval(waitForFunction);
                        
                        // Hacer llamada AJAX para obtener proveedores del item
                        $.ajax({
                            url: `/Item/ObtenerProveedores/${itemId}`,
                            type: 'GET',
                            success: function(data) {
                                console.log('Proveedores cargados:', data);
                                if (data && data.length > 0) {
                                    // Transformar los datos al formato esperado
                                    const proveedoresData = data.map(p => ({
                                        proveedorId: p.proveedorId,
                                        nombreProveedor: p.nombreProveedor || p.proveedorNombre,
                                        esPrincipal: p.esPrincipal,
                                        unidadMedidaCompraId: p.unidadMedidaCompraId,
                                        precioCompra: p.precioCompra,
                                        factorConversion: p.factorConversion
                                    }));
                                    
                                    // Cargar proveedores en la tabla
                                    window.cargarProveedoresExistentes(proveedoresData);
                                }
                            },
                            error: function(err) {
                                console.error('Error al cargar proveedores:', err);
                            }
                        });
                    }
                }, 100);
            }
            
            // Inicializar cuentas contables cuando se active el tab de contabilidad
            let cuentasContablesIniciadas = false;
            $('a[href="#tab-contabilidad"]').on('shown.bs.tab', function() {
                if (!cuentasContablesIniciadas) {
                    cuentasContablesIniciadas = true;
                    cargarCuentasContables();
                }
            });
            
            // Función para cargar cuentas contables
            function cargarCuentasContables() {
                console.log('Cargando cuentas contables...');
                
                $('.select2-cuenta').each(function() {
                    const $select = $(this);
                    const selectId = $select.attr('id');
                    
                    // Obtener el valor actual antes de inicializar Select2
                    const valorActual = $select.val();
                    const textActual = $select.find('option:selected').text();
                    
                    // Configurar Select2 con AJAX para buscar cuentas
                    $select.select2({
                        theme: 'bootstrap-5',
                        width: '100%',
                        placeholder: 'Seleccione una cuenta',
                        allowClear: true,
                        ajax: {
                            url: '/api/CuentasContables/buscar',
                            dataType: 'json',
                            delay: 250,
                            data: function(params) {
                                return {
                                    q: params.term || ''
                                };
                            },
                            processResults: function(data) {
                                return {
                                    results: data.map(function(item) {
                                        return {
                                            id: item.id,
                                            text: item.codigo + ' - ' + item.nombre
                                        };
                                    })
                                };
                            },
                            cache: true
                        },
                        // Mantener la opción seleccionada si existe
                        initSelection: function(element, callback) {
                            if (valorActual) {
                                callback({id: valorActual, text: textActual});
                            }
                        }
                    });
                    
                    // Si hay un valor preseleccionado, asegurarse de que esté seleccionado
                    if (valorActual && textActual) {
                        const option = new Option(textActual, valorActual, true, true);
                        $select.append(option).trigger('change');
                    }
                });
            }
            
            // Form submission handling
            $('#itemForm').on('submit', function(e) {
                // Prepare form for submission if needed
                prepareFormForSubmission();
            });
            
            function prepareFormForSubmission() {
                // Convert decimal separators from comma to period for numeric fields
                const numericFields = [
                    '.contenedor-costo',
                    '.cantidad-input',
                    '#Rendimiento'
                ];
                
                numericFields.forEach(selector => {
                    $(selector).each(function() {
                        const $field = $(this);
                        const value = $field.val();
                        if (value) {
                            const normalizedValue = value.replace(',', '.');
                            $field.val(normalizedValue);
                        }
                    });
                });
            }
        });
    </script>
}