@model SistemaContable.Models.ViewModels.ItemViewModel
@{
    ViewData["Title"] = "Editar Item";
}

<div class="container-fluid p-0">
    <!-- Sección de encabezado con título y breadcrumb -->
    <div class="row mb-4">
        <div class="col-12">
            <h1 class="h4">Editar Item</h1>
            <nav class="breadcrumb-container d-none d-sm-block d-lg-inline-block" aria-label="breadcrumb">
                <ol class="breadcrumb pt-0">
                    <li class="breadcrumb-item">
                        <a asp-controller="Home" asp-action="Index">Dashboard</a>
                    </li>
                    <li class="breadcrumb-item">
                        <a asp-action="Index">Items</a>
                    </li>
                    <li class="breadcrumb-item active">Editar</li>
                </ol>
            </nav>
        </div>
    </div>

    <form asp-action="Edit" method="post" enctype="multipart/form-data" id="itemForm">
        <div asp-validation-summary="All" class="text-danger mb-3"></div>
        <input type="hidden" asp-for="Id" />

        <!-- Nav tabs con estilo Underline -->
        <div class="card mb-4">
            <div class="card-body">
                <ul class="nav nav-tabs-underline" role="tablist">
                    <li class="nav-item" role="presentation">
                        <a class="nav-link active" href="#tab-info" role="tab" data-bs-toggle="tab">
                            Información
                        </a>
                    </li>
                    <li class="nav-item" role="presentation">
                        <a class="nav-link" href="#tab-compras" role="tab" data-bs-toggle="tab">
                            Compras
                        </a>
                    </li>
                    <li class="nav-item" role="presentation">
                        <a class="nav-link" href="#tab-contabilidad" role="tab" data-bs-toggle="tab">
                            Contabilidad
                        </a>
                    </li>
                    <li class="nav-item" role="presentation">
                        <a class="nav-link" href="#tab-taras" role="tab" data-bs-toggle="tab">
                            Taras
                        </a>
                    </li>
                    <li class="nav-item" role="presentation">
                        <a class="nav-link" href="#tab-venta" role="tab" data-bs-toggle="tab">
                            Producto de Venta
                        </a>
                    </li>
                </ul>

                <!-- Tab content - Inline como en Create -->
                <div class="tab-content mt-4">
                    <!-- Tab Información -->
                    <div class="tab-pane fade show active" id="tab-info" role="tabpanel">
                        <div class="row">
                            <div class="col-md-8">
                                <div class="row mb-3">
                                    <div class="col-md-6">
                                        <label asp-for="Codigo" class="form-label">Código (Automático)</label>
                                        <input asp-for="Codigo" class="form-control bg-light" readonly />
                                        <span asp-validation-for="Codigo" class="text-danger"></span>
                                    </div>
                                    <div class="col-md-6">
                                        <label asp-for="CodigoBarras" class="form-label">Código de Barras</label>
                                        <div class="input-group">
                                            <input asp-for="CodigoBarras" class="form-control" />
                                            <button type="button" class="btn btn-outline-secondary" id="generarCodigoBarras" title="Generar código">
                                                <i class="fas fa-barcode"></i>
                                            </button>
                                            <button type="button" class="btn btn-outline-info" id="imprimirCodigoBarras" title="Imprimir código" disabled>
                                                <i class="fas fa-print"></i>
                                            </button>
                                        </div>
                                        <div id="codigoBarrasPreview" class="mt-2 text-center" style="display: none;">
                                            <svg id="barcode"></svg>
                                        </div>
                                        <span asp-validation-for="CodigoBarras" class="text-danger"></span>
                                    </div>
                                </div>
                                <div class="row mb-3">
                                    <div class="col-md-12">
                                        <label asp-for="Nombre" class="form-label">Nombre *</label>
                                        <input asp-for="Nombre" class="form-control" required />
                                        <span asp-validation-for="Nombre" class="text-danger"></span>
                                    </div>
                                </div>
                                <div class="row mb-3">
                                    <div class="col-md-6">
                                        <label asp-for="CategoriaId" class="form-label">Categoría *</label>
                                        <select asp-for="CategoriaId" asp-items="Model.CategoriasDisponibles" class="form-select select2-categoria" required>
                                            <option value="">Seleccione una categoría</option>
                                        </select>
                                        <span asp-validation-for="CategoriaId" class="text-danger"></span>
                                    </div>
                                    <div class="col-md-6">
                                        <label asp-for="MarcaId" class="form-label">Marca</label>
                                        <select asp-for="MarcaId" asp-items="Model.MarcasDisponibles" class="form-select select2-marca">
                                            <option value="">Genérica</option>
                                        </select>
                                        <span asp-validation-for="MarcaId" class="text-danger"></span>
                                    </div>
                                </div>
                                <div class="row mb-3">
                                    <div class="col-md-12">
                                        <label asp-for="Descripcion" class="form-label">Descripción</label>
                                        <textarea asp-for="Descripcion" class="form-control" rows="3"></textarea>
                                        <span asp-validation-for="Descripcion" class="text-danger"></span>
                                    </div>
                                </div>
                                <div class="row mb-3">
                                    <div class="col-md-6">
                                        <label asp-for="ImpuestoId" class="form-label">Impuesto</label>
                                        <select asp-for="ImpuestoId" asp-items="Model.ImpuestosDisponibles" class="form-select select2">
                                            <option value="">Seleccione un impuesto</option>
                                        </select>
                                        <span asp-validation-for="ImpuestoId" class="text-danger"></span>
                                    </div>
                                    <div class="col-md-6">
                                        <label asp-for="Rendimiento" class="form-label">Rendimiento (%)</label>
                                        <input asp-for="Rendimiento" class="form-control" type="number" step="0.01" min="0" max="100" value="100" data-decimal="@Model.SeparadorDecimal" />
                                        <small class="text-muted">Porcentaje del producto que se mantiene después de procesarlo</small>
                                        <span asp-validation-for="Rendimiento" class="text-danger"></span>
                                    </div>
                                </div>
                                <div class="row mb-3">
                                    <div class="col-md-6">
                                        <label asp-for="Estado" class="form-label">Estado</label>
                                        <select asp-for="Estado" class="form-select">
                                            <option value="true" selected>Activo</option>
                                            <option value="false">Inactivo</option>
                                        </select>
                                        <span asp-validation-for="Estado" class="text-danger"></span>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="card">
                                    <div class="card-body">
                                        <h5 class="card-title">Imagen</h5>
                                        <div class="modern-image-upload">
                                            <!-- Vista previa de imagen -->
                                            <div id="imagePreview" class="image-preview mb-3 text-center" style="display: @(string.IsNullOrEmpty(Model.ImagenUrl) ? "none" : "block");">
                                                @if (string.IsNullOrEmpty(Model.ImagenUrl))
                                                {
                                                    <img id="preview" src="#" alt="Vista previa" class="img-fluid rounded shadow-sm" style="max-height: 200px; display: none;" />
                                                }
                                                else
                                                {
                                                    <img id="preview" src="@Model.ImagenUrl" data-original-src="@Model.ImagenUrl" alt="Vista previa" class="img-fluid rounded shadow-sm" style="max-height: 200px;" />
                                                }
                                            </div>
                                            <div id="imageDefault" class="no-image-container p-4 border rounded bg-light d-flex align-items-center justify-content-center mb-3" style="height: 200px; display: @(string.IsNullOrEmpty(Model.ImagenUrl) ? "flex" : "none");">
                                                <div class="text-center text-muted">
                                                    <i class="fas fa-image fa-4x mb-3"></i>
                                                    <p>No hay imagen</p>
                                                </div>
                                            </div>
                                            
                                            <!-- Selector de archivo -->
                                            <div class="file-selector mb-3">
                                                <div class="input-group">
                                                    <input type="file" asp-for="ItemImage" class="form-control" accept="image/*" id="imageFile">
                                                    <button class="btn btn-outline-secondary" type="button" id="browseButton" title="Seleccionar imagen">
                                                        <i class="fas fa-folder-open"></i>
                                                    </button>
                                                    <button class="btn btn-outline-danger" type="button" id="clearImageBtn" style="display: @(!string.IsNullOrEmpty(Model.ImagenUrl) ? "inline-flex" : "none")">
                                                        <i class="fas fa-times"></i>
                                                    </button>
                                                </div>
                                            </div>
                                            
                                            <!-- Información sobre tipos de archivo -->
                                            <div class="mt-2 text-muted small">
                                                <ul class="ps-3 mb-0">
                                                    <li>Formatos: JPG, PNG o GIF</li>
                                                    <li>Tamaño máximo: 800KB</li>
                                                    <li>Dimensiones recomendadas: 800x800px</li>
                                                </ul>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Tab Compras -->
                    <div class="tab-pane fade" id="tab-compras" role="tabpanel">
                        @await Html.PartialAsync("_ComprasPartial", Model)
                    </div>

                    <!-- Tab Contabilidad -->
                    <div class="tab-pane fade" id="tab-contabilidad" role="tabpanel">
                        <div id="contabilidad-container">
                            @await Html.PartialAsync("_TabContabilidad", Model)
                        </div>
                    </div>

                    <!-- Tab Taras -->
                    <div class="tab-pane fade" id="tab-taras" role="tabpanel">
                        @await Html.PartialAsync("_TabTaras", Model)
                    </div>

                    <!-- Tab Producto de Venta -->
                    <div class="tab-pane fade" id="tab-venta" role="tabpanel">
                        @await Html.PartialAsync("_TabProductoVenta", Model)
                    </div>
                </div>
            </div>
        </div>

        <!-- Botones de acción -->
        <div class="card mb-4">
            <div class="card-body">
                <div class="d-flex justify-content-end gap-2">
                    <a asp-action="Index" class="btn btn-secondary">Cancelar</a>
                    <button type="submit" class="btn btn-primary">Guardar Cambios</button>
                </div>
            </div>
        </div>
    </form>
</div>

<!-- Offcanvas para crear/editar categoría -->
<div class="offcanvas offcanvas-end offcanvas-lg bg-white border-primary" tabindex="-1" id="offcanvasCategoria" aria-labelledby="offcanvasCategoriaLabel">
    <div class="offcanvas-header">
        <h5 id="offcanvasCategoriaLabel">Nueva Categoría</h5>
        <button type="button" class="btn-close text-reset" data-bs-dismiss="offcanvas" aria-label="Close"></button>
    </div>
    <div class="offcanvas-body">
        <div id="formCategoriaContainer">
            <!-- Se cargará dinámicamente -->
        </div>
    </div>
</div>

<!-- Offcanvas para crear/editar marca -->
<div class="offcanvas offcanvas-end offcanvas-lg bg-white border-primary" tabindex="-1" id="offcanvasMarca" aria-labelledby="offcanvasMarcaLabel">
    <div class="offcanvas-header">
        <h5 id="offcanvasMarcaLabel">Nueva Marca</h5>
        <button type="button" class="btn-close text-reset" data-bs-dismiss="offcanvas" aria-label="Close"></button>
    </div>
    <div class="offcanvas-body">
        <div id="formMarcaContainer">
            <!-- Se cargará dinámicamente -->
        </div>
    </div>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
    <link href="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/css/select2.min.css" rel="stylesheet" />
    <link href="https://cdn.jsdelivr.net/npm/select2-bootstrap-5-theme@1.3.0/dist/select2-bootstrap-5-theme.min.css" rel="stylesheet" />
    <link href="~/css/select2-fixes.css" rel="stylesheet" />
    <script src="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/js/select2.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script src="https://cdn.jsdelivr.net/npm/jsbarcode@3.11.5/dist/JsBarcode.all.min.js"></script>
    
    <!-- Nuestro script principal (alineado con Create.cshtml) -->
    <script src="~/js/items/item-create-simple.js"></script>
    
    <!-- Script para generar código automático (alineado con Create.cshtml) -->
    <script src="~/js/items/code-generator.js"></script>
    
    <!-- Scripts para otras pestañas (alineado con Create.cshtml) -->
    <script src="~/Scripts/contenedores.js"></script>
    <script src="~/js/items/tab-info-init.js"></script>
    <script src="~/js/items/tab-compras-init.js"></script>
    <script src="~/js/items/tab-contabilidad-init.js"></script>
    <script src="~/js/items/tab-venta-init.js"></script>

    <script>
        $(document).ready(function() {
            window.itemCreateInitialized = true; // Indica que la inicialización principal se manejará externamente
            const itemId = '@Model.Id'; // Crucial para el modo edición
            let proveedoresCargados = false; // Control para la carga de proveedores existentes

            // Función para cargar proveedores existentes del ítem (específico del modo Edit)
            function cargarProveedoresDelItem(itemId) {
                console.log('Edit.cshtml: Cargando proveedores para item:', itemId);
                const waitForFunction = setInterval(function() {
                    if (typeof window.cargarProveedoresExistentes === 'function') {
                        clearInterval(waitForFunction);
                        $.ajax({
                            url: `/Item/ObtenerProveedores/${itemId}`,
                            type: 'GET',
                            success: function(data) {
                                if (data && data.length > 0) {
                                    const proveedoresData = data.map(p => ({
                                        proveedorId: p.proveedorId,
                                        nombreProveedor: p.nombreProveedor || p.proveedorNombre,
                                        esPrincipal: p.esPrincipal,
                                        unidadMedidaCompraId: p.unidadMedidaCompraId,
                                        precioCompra: p.precioCompra,
                                        factorConversion: p.factorConversion
                                    }));
                                    window.cargarProveedoresExistentes(proveedoresData);
                                }
                            },
                            error: function(err) {
                                console.error('Error al cargar proveedores del item:', err);
                            }
                        });
                    } else {
                        // Puede que la función aún no esté lista si el script de la pestaña de compras carga con retraso
                        console.log("Edit.cshtml: Esperando a window.cargarProveedoresExistentes...");
                    }
                }, 200); // Revisa cada 200ms
                 // Timeout para evitar bucles infinitos si la función nunca aparece
                setTimeout(() => clearInterval(waitForFunction), 10000);
            }

            // Inicialización de Select2 para cuentas contables (específico del modo Edit)
            let cuentasContablesIniciadas = false;
            function cargarCuentasContables() {
                if (cuentasContablesIniciadas) return;
                cuentasContablesIniciadas = true;
                console.log('Edit.cshtml: Cargando selectores de cuentas contables...');
                $('.select2-cuenta').each(function() {
                    const $select = $(this);
                    const valorActual = $select.val();
                    // Para obtener el texto, es mejor tomarlo del atributo data si es posible, o de la opción seleccionada
                    let textActual = $select.find('option:selected').text();
                    if ($select.find('option:selected').val() === "") textActual = null; // No usar el texto del placeholder

                    $select.select2({
                        theme: 'bootstrap-5',
                        width: '100%',
                        placeholder: 'Seleccione una cuenta',
                        allowClear: true,
                        ajax: {
                            url: '/api/CuentasContables/buscar',
                            dataType: 'json',
                            delay: 250,
                            data: function (params) { return { q: params.term || '' }; },
                            processResults: function (data) {
                                return {
                                    results: data.map(function (item) {
                                        return { id: item.id, text: item.codigo + ' - ' + item.nombre };
                                    })
                                };
                            },
                            cache: true
                        },
                        // Para preseleccionar el valor en modo edición
                        dataAdapter: $.fn.select2.amd.require('select2/data/extended-ajax'),
                        initialDataUrl: valorActual ? `/api/CuentasContables/obtener/${valorActual}` : null,
                        formatInitialSelection: function(data) { return data.codigo + ' - ' + data.nombre; }
                    });
                     // Si hay un valor y texto inicial (del renderizado del servidor), y Select2 no lo tomó con initialDataUrl
                    if (valorActual && textActual && $select.val() !== valorActual) {
                         // Comprobar si la opción ya existe para no duplicarla
                        if ($select.find("option[value='" + valorActual + "']").length === 0) {
                            const option = new Option(textActual, valorActual, true, true);
                            $select.append(option);
                        }
                        $select.val(valorActual).trigger('change.select2');
                    } else if (valorActual && !$select.val()){
                        // Si solo hay valor y select2 no pudo cargar, reintentar una carga simple
                         $.ajax(`/api/CuentasContables/obtener/${valorActual}`, {
                            dataType: "json"
                        }).done(function(data) {
                             if(data && data.id && data.nombre) {
                                if ($select.find("option[value='" + data.id + "']").length === 0) {
                                    const option = new Option(data.codigo + ' - ' + data.nombre, data.id, true, true);
                                    $select.append(option);
                                }
                                $select.val(data.id).trigger('change.select2');
                             }
                        });
                    }
                });
            }

            $('a[data-bs-toggle="tab"]').on('shown.bs.tab', function (e) {
                if ($(e.target).attr('href') === '#tab-contabilidad') {
                    cargarCuentasContables();
                }
                // Podrías agregar lógica similar para la pestaña de compras si es necesario
                if ($(e.target).attr('href') === '#tab-compras') {
                    if (itemId && typeof window.initializeProveedores === 'function' && !proveedoresCargados) {
                         window.initializeProveedores(); // Asegura que el UI de la tabla esté listo
                         cargarProveedoresDelItem(itemId);
                         proveedoresCargados = true;
                    }
                }
            });


            // Lógica de preparación del formulario y envío (combinada y adaptada)
            function prepareFormForSubmission() {
                const numericFields = [
                    '.contenedor-costo', '#Rendimiento', // Campos relevantes para Item/Edit
                    '#ProductoVenta_PrecioVenta', '#ProductoVenta_Costo', '#ProductoVenta_Cantidad', // Campos de ProductoVenta
                    '.cantidad-input' // Presente en compras
                ];
                numericFields.forEach(selector => {
                    $(selector).each(function() {
                        const $field = $(this);
                        const value = $field.val();
                        if (value && typeof value === 'string') { // Asegurar que es string antes de reemplazar
                            $field.val(value.replace(',', '.'));
                        }
                    });
                });
            }
            
            $('#itemForm').on('submit', function(e) {
                prepareFormForSubmission();
                // Desactivar campos de ProductoVenta antes del submit (lógica de Create.cshtml)
                $('[name^="ProductoVenta."]').each(function() {
                    $(this).prop('disabled', true);
                });
            });
            
            $.validator.setDefaults({
                submitHandler: function(form) {
                    // Re-habilitar campos de ProductoVenta para que se incluyan en el submit
                    $('[name^="ProductoVenta."]').each(function() {
                        $(this).prop('disabled', false);
                    });
                    // Luego, el form.submit() se encarga del envío.
                    // Si se necesita deshabilitarlos *después* del submit por alguna razón (poco común), se haría en un callback del submit.
                    form.submit();
                }
            });

            // Inicialización de datos específicos del modo Edit después de que la página esté lista
            // y potencialmente después de que item-create-simple.js haya hecho su inicialización.
            setTimeout(function() {
                // Cargar cuentas contables si la pestaña de contabilidad es la activa al cargar
                if ($('#tab-contabilidad').hasClass('active') || $('#tab-contabilidad').is(':visible')) {
                    cargarCuentasContables();
                }
                 // Cargar proveedores si la pestaña de compras es la activa al cargar y tenemos un itemId
                if (itemId && ($('#tab-compras').hasClass('active') || $('#tab-compras').is(':visible'))) {
                     if (typeof window.initializeProveedores === 'function' && !proveedoresCargados) {
                         window.initializeProveedores();
                         cargarProveedoresDelItem(itemId);
                         proveedoresCargados = true;
                     } else if (!window.initializeProveedores) {
                         console.warn("Edit.cshtml: initializeProveedores no está disponible al cargar la pestaña de compras activa.");
                     }
                } else if (itemId && !$('#tab-compras').hasClass('active') && !$('#tab-compras').is(':visible')) {
                    // Si no está activa, la lógica 'shown.bs.tab' se encargará cuando se active
                }


            }, 700); // Delay para permitir que otros scripts (como item-create-simple.js) se ejecuten.
        });
    </script>
}