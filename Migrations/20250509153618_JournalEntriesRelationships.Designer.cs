// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SistemaContable.Data;

#nullable disable

namespace SistemaContable.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250509153618_JournalEntriesRelationships")]
    partial class JournalEntriesRelationships
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("SistemaContable.Models.AjusteConciliacion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Aplicado")
                        .HasColumnType("boolean");

                    b.Property<int?>("AsientoContableId")
                        .HasColumnType("integer");

                    b.Property<string>("Concepto")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("ConciliacionId")
                        .HasColumnType("integer");

                    b.Property<string>("Descripcion")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("Monto")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Tipo")
                        .HasColumnType("integer");

                    b.Property<string>("UsuarioCreacion")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AsientoContableId");

                    b.HasIndex("ConciliacionId");

                    b.ToTable("AjustesConciliacion");
                });

            modelBuilder.Entity("SistemaContable.Models.AsientoContable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Concepto")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<bool>("Contabilizado")
                        .HasColumnType("boolean");

                    b.Property<string>("Descripcion")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("EmpresaId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("FechaContabilizacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("MontoTotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Numero")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("OrigenDocumento")
                        .HasColumnType("text");

                    b.Property<int?>("OrigenId")
                        .HasColumnType("integer");

                    b.Property<int>("Tipo")
                        .HasColumnType("integer");

                    b.Property<string>("UsuarioCreacion")
                        .HasColumnType("text");

                    b.Property<string>("UsuarioModificacion")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("EmpresaId");

                    b.ToTable("AsientosContables");
                });

            modelBuilder.Entity("SistemaContable.Models.Banco", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activo")
                        .HasColumnType("boolean");

                    b.Property<int>("CuentaContableId")
                        .HasColumnType("integer");

                    b.Property<string>("Descripcion")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("EmpresaId")
                        .HasColumnType("integer");

                    b.Property<string>("EntidadBancaria")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("FechaApertura")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LogoUrl")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Moneda")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("NumeroCuenta")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<decimal>("SaldoActual")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("SaldoConciliado")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("SaldoInicial")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("TipoCuenta")
                        .HasColumnType("integer");

                    b.Property<string>("UsuarioCreacion")
                        .HasColumnType("text");

                    b.Property<string>("UsuarioModificacion")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CuentaContableId");

                    b.HasIndex("EmpresaId");

                    b.ToTable("Bancos");
                });

            modelBuilder.Entity("SistemaContable.Models.Cliente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Celular")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<int?>("CuentaPorCobrarId")
                        .HasColumnType("integer");

                    b.Property<int?>("CuentaPorPagarId")
                        .HasColumnType("integer");

                    b.Property<string>("Direccion")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("EsCliente")
                        .HasColumnType("boolean");

                    b.Property<bool>("EsProveedor")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ImagenUrl")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<decimal?>("LimiteCredito")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("ListaPrecioId")
                        .HasColumnType("integer");

                    b.Property<int?>("MunicipioId")
                        .HasColumnType("integer");

                    b.Property<string>("NombreRazonSocial")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("NumeroIdentificacion")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<int?>("PaisId")
                        .HasColumnType("integer");

                    b.Property<int?>("PlazoPagoId")
                        .HasColumnType("integer");

                    b.Property<string>("Telefono")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<int>("TipoIdentificacionId")
                        .HasColumnType("integer");

                    b.Property<int?>("TipoNcfId")
                        .HasColumnType("integer");

                    b.Property<int?>("VendedorId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CuentaPorCobrarId");

                    b.HasIndex("CuentaPorPagarId");

                    b.HasIndex("ListaPrecioId");

                    b.HasIndex("MunicipioId");

                    b.HasIndex("PaisId");

                    b.HasIndex("PlazoPagoId");

                    b.HasIndex("TipoIdentificacionId");

                    b.HasIndex("TipoNcfId");

                    b.HasIndex("VendedorId");

                    b.ToTable("Clientes", (string)null);
                });

            modelBuilder.Entity("SistemaContable.Models.ComprobanteFiscal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Electronica")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("FechaFinalizacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("FechaVencimiento")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int?>("NumeroFinal")
                        .HasColumnType("integer");

                    b.Property<int>("NumeroInicial")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.Property<bool>("Preferida")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("Prefijo")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<int>("SiguienteNumero")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.Property<string>("Sucursal")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("TipoDocumento")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("UltimaModificacion")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("ComprobantesFiscales", (string)null);
                });

            modelBuilder.Entity("SistemaContable.Models.ConciliacionBancaria", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BancoId")
                        .HasColumnType("integer");

                    b.Property<decimal>("DiferenciaConciliacion")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("EmpresaId")
                        .HasColumnType("integer");

                    b.Property<int>("Estado")
                        .HasColumnType("integer");

                    b.Property<DateTime>("FechaConciliacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("FechaFin")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("FechaInicio")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Notas")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<decimal>("SaldoSegunBanco")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("SaldoSegunLibro")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UsuarioCreacion")
                        .HasColumnType("text");

                    b.Property<string>("UsuarioModificacion")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BancoId");

                    b.HasIndex("EmpresaId");

                    b.ToTable("ConciliacionesBancarias");
                });

            modelBuilder.Entity("SistemaContable.Models.Contacto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activo")
                        .HasColumnType("boolean");

                    b.Property<string>("Direccion")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<int>("EmpresaId")
                        .HasColumnType("integer");

                    b.Property<bool>("EsCliente")
                        .HasColumnType("boolean");

                    b.Property<bool>("EsProveedor")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("FechaModificacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Identificacion")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Telefono")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("EmpresaId");

                    b.ToTable("Contactos");
                });

            modelBuilder.Entity("SistemaContable.Models.CuentaContable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activo")
                        .HasColumnType("boolean");

                    b.Property<string>("Categoria")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<int?>("CuentaPadreId")
                        .HasColumnType("integer");

                    b.Property<string>("Descripcion")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("EmpresaId")
                        .HasColumnType("integer");

                    b.Property<bool>("EsCuentaSistema")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Naturaleza")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Nivel")
                        .HasColumnType("integer");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("Orden")
                        .HasColumnType("integer");

                    b.Property<string>("TipoCuenta")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UsoCuenta")
                        .HasColumnType("text");

                    b.Property<bool>("VerSaldoPorTercero")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("CuentaPadreId");

                    b.HasIndex("EmpresaId");

                    b.ToTable("CuentasContables");
                });

            modelBuilder.Entity("SistemaContable.Models.DetalleAsientoContable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AsientoContableId")
                        .HasColumnType("integer");

                    b.Property<string>("Concepto")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int?>("ContactoId")
                        .HasColumnType("integer");

                    b.Property<int>("CuentaContableId")
                        .HasColumnType("integer");

                    b.Property<decimal>("Debe")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Haber")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("AsientoContableId");

                    b.HasIndex("ContactoId");

                    b.HasIndex("CuentaContableId");

                    b.ToTable("DetallesAsientoContable");
                });

            modelBuilder.Entity("SistemaContable.Models.Empresa", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activo")
                        .HasColumnType("boolean");

                    b.Property<string>("Ciudad")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("CodigoPostal")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime?>("FechaActualizacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LogoUrl")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("MonedaPrincipal")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("NombreComercial")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("NumeroEmpleados")
                        .HasColumnType("integer");

                    b.Property<string>("NumeroIdentificacion")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Pais")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("PrecisionDecimal")
                        .HasColumnType("integer");

                    b.Property<string>("Provincia")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("ResponsabilidadTributaria")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("SeparadorDecimal")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)");

                    b.Property<string>("SitioWeb")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("TipoIdentificacion")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.ToTable("Empresas", (string)null);
                });

            modelBuilder.Entity("SistemaContable.Models.EntradaDiario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<int>("Estado")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("NumeracionId")
                        .HasColumnType("integer");

                    b.Property<string>("Observaciones")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("TipoEntradaId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("NumeracionId");

                    b.HasIndex("TipoEntradaId");

                    b.ToTable("EntradasDiario", (string)null);
                });

            modelBuilder.Entity("SistemaContable.Models.Impuesto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activo")
                        .HasColumnType("boolean");

                    b.Property<int>("CuentaContableComprasId")
                        .HasColumnType("integer");

                    b.Property<int>("CuentaContableVentasId")
                        .HasColumnType("integer");

                    b.Property<string>("Descripcion")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("EmpresaId")
                        .HasColumnType("integer");

                    b.Property<bool>("EsAcreditable")
                        .HasColumnType("boolean");

                    b.Property<bool>("EstaEnUso")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<decimal?>("Porcentaje")
                        .HasPrecision(5, 2)
                        .HasColumnType("numeric(5,2)");

                    b.Property<int>("Tipo")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CuentaContableComprasId");

                    b.HasIndex("CuentaContableVentasId");

                    b.HasIndex("EmpresaId");

                    b.ToTable("Impuestos", (string)null);
                });

            modelBuilder.Entity("SistemaContable.Models.ListaPrecio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activa")
                        .HasColumnType("boolean");

                    b.Property<string>("Descripcion")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("EsPredeterminada")
                        .HasColumnType("boolean");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<decimal?>("Porcentaje")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.ToTable("ListasPrecios", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Activa = true,
                            Descripcion = "Precios regulares",
                            EsPredeterminada = true,
                            Nombre = "Lista Regular"
                        },
                        new
                        {
                            Id = 2,
                            Activa = true,
                            Descripcion = "Precios para mayoristas",
                            EsPredeterminada = false,
                            Nombre = "Mayoristas",
                            Porcentaje = 10m
                        },
                        new
                        {
                            Id = 3,
                            Activa = true,
                            Descripcion = "Precios para clientes VIP",
                            EsPredeterminada = false,
                            Nombre = "VIP",
                            Porcentaje = 20m
                        });
                });

            modelBuilder.Entity("SistemaContable.Models.MovimientoContable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("ContactoId")
                        .HasColumnType("integer");

                    b.Property<decimal>("Credito")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("CuentaContableId")
                        .HasColumnType("integer");

                    b.Property<decimal>("Debito")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Descripcion")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("EntradaDiarioId")
                        .HasColumnType("integer");

                    b.Property<string>("NumeroDocumento")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("TipoContacto")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)");

                    b.HasKey("Id");

                    b.HasIndex("ContactoId");

                    b.HasIndex("CuentaContableId");

                    b.HasIndex("EntradaDiarioId");

                    b.ToTable("MovimientosContables", (string)null);
                });

            modelBuilder.Entity("SistemaContable.Models.Municipio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("ProvinciaId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ProvinciaId");

                    b.ToTable("Municipios", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Nombre = "Santo Domingo Este",
                            ProvinciaId = 1
                        },
                        new
                        {
                            Id = 2,
                            Nombre = "Santo Domingo Norte",
                            ProvinciaId = 1
                        },
                        new
                        {
                            Id = 3,
                            Nombre = "Santiago",
                            ProvinciaId = 2
                        });
                });

            modelBuilder.Entity("SistemaContable.Models.NumeracionEntradaDiario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("EsPreferida")
                        .HasColumnType("boolean");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("NumeroActual")
                        .HasColumnType("integer");

                    b.Property<string>("Prefijo")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<int>("TipoEntradaDiarioId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TipoEntradaDiarioId");

                    b.ToTable("NumeracionesEntradaDiario", (string)null);
                });

            modelBuilder.Entity("SistemaContable.Models.Pais", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Bandera")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Codigo")
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("Paises", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Bandera = "/images/flags/DO.png",
                            Codigo = "DO",
                            Nombre = "República Dominicana"
                        },
                        new
                        {
                            Id = 2,
                            Bandera = "/images/flags/US.png",
                            Codigo = "US",
                            Nombre = "Estados Unidos"
                        },
                        new
                        {
                            Id = 3,
                            Bandera = "/images/flags/ES.png",
                            Codigo = "ES",
                            Nombre = "España"
                        },
                        new
                        {
                            Id = 4,
                            Bandera = "/images/flags/MX.png",
                            Codigo = "MX",
                            Nombre = "México"
                        },
                        new
                        {
                            Id = 5,
                            Bandera = "/images/flags/CO.png",
                            Codigo = "CO",
                            Nombre = "Colombia"
                        });
                });

            modelBuilder.Entity("SistemaContable.Models.PlazoPago", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("Dias")
                        .HasColumnType("integer");

                    b.Property<bool>("EsPredeterminado")
                        .HasColumnType("boolean");

                    b.Property<bool>("EsVencimientoManual")
                        .HasColumnType("boolean");

                    b.Property<bool>("EstaEnUso")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("PlazosPago", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Dias = 0,
                            EsPredeterminado = false,
                            EsVencimientoManual = false,
                            EstaEnUso = false,
                            FechaCreacion = new DateTime(2025, 5, 9, 15, 36, 17, 262, DateTimeKind.Utc).AddTicks(9740),
                            Nombre = "De contado"
                        },
                        new
                        {
                            Id = 2,
                            Dias = 8,
                            EsPredeterminado = false,
                            EsVencimientoManual = false,
                            EstaEnUso = false,
                            FechaCreacion = new DateTime(2025, 5, 9, 15, 36, 17, 262, DateTimeKind.Utc).AddTicks(9744),
                            Nombre = "8 días"
                        },
                        new
                        {
                            Id = 3,
                            Dias = 15,
                            EsPredeterminado = false,
                            EsVencimientoManual = false,
                            EstaEnUso = false,
                            FechaCreacion = new DateTime(2025, 5, 9, 15, 36, 17, 262, DateTimeKind.Utc).AddTicks(9745),
                            Nombre = "15 días"
                        },
                        new
                        {
                            Id = 4,
                            Dias = 30,
                            EsPredeterminado = false,
                            EsVencimientoManual = false,
                            EstaEnUso = false,
                            FechaCreacion = new DateTime(2025, 5, 9, 15, 36, 17, 262, DateTimeKind.Utc).AddTicks(9747),
                            Nombre = "30 días"
                        },
                        new
                        {
                            Id = 5,
                            Dias = 60,
                            EsPredeterminado = false,
                            EsVencimientoManual = false,
                            EstaEnUso = false,
                            FechaCreacion = new DateTime(2025, 5, 9, 15, 36, 17, 262, DateTimeKind.Utc).AddTicks(9749),
                            Nombre = "60 días"
                        },
                        new
                        {
                            Id = 6,
                            EsPredeterminado = false,
                            EsVencimientoManual = true,
                            EstaEnUso = false,
                            FechaCreacion = new DateTime(2025, 5, 9, 15, 36, 17, 262, DateTimeKind.Utc).AddTicks(9750),
                            Nombre = "Vencimiento manual"
                        });
                });

            modelBuilder.Entity("SistemaContable.Models.Provincia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("Provincias", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Nombre = "Santo Domingo"
                        },
                        new
                        {
                            Id = 2,
                            Nombre = "Santiago"
                        },
                        new
                        {
                            Id = 3,
                            Nombre = "La Vega"
                        });
                });

            modelBuilder.Entity("SistemaContable.Models.Retencion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activo")
                        .HasColumnType("boolean");

                    b.Property<string>("CuentaContableCompras")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("CuentaContableRetencionesAsumidas")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("CuentaContableVentas")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Descripcion")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("FechaModificacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<decimal>("Porcentaje")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5, 2)");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("Retenciones", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Activo = true,
                            Descripcion = "Impuesto Sobre la Renta al 10%",
                            FechaCreacion = new DateTime(2025, 5, 9, 15, 36, 17, 263, DateTimeKind.Utc).AddTicks(1717),
                            FechaModificacion = new DateTime(2025, 5, 9, 15, 36, 17, 263, DateTimeKind.Utc).AddTicks(1717),
                            Nombre = "ISR 10%",
                            Porcentaje = 10.00m,
                            Tipo = "ISR"
                        },
                        new
                        {
                            Id = 2,
                            Activo = true,
                            Descripcion = "Retención del IVA al 15%",
                            FechaCreacion = new DateTime(2025, 5, 9, 15, 36, 17, 263, DateTimeKind.Utc).AddTicks(1720),
                            FechaModificacion = new DateTime(2025, 5, 9, 15, 36, 17, 263, DateTimeKind.Utc).AddTicks(1721),
                            Nombre = "IVA Retenido 15%",
                            Porcentaje = 15.00m,
                            Tipo = "IVA"
                        });
                });

            modelBuilder.Entity("SistemaContable.Models.SaldoInicial", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("ContactoId")
                        .HasColumnType("integer");

                    b.Property<int>("CuentaContableId")
                        .HasColumnType("integer");

                    b.Property<int>("EmpresaId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("FechaInicial")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("Valor")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("ContactoId");

                    b.HasIndex("CuentaContableId");

                    b.HasIndex("EmpresaId");

                    b.ToTable("SaldosIniciales");
                });

            modelBuilder.Entity("SistemaContable.Models.TipoEntradaDiario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("TiposEntradaDiario", (string)null);
                });

            modelBuilder.Entity("SistemaContable.Models.TipoIdentificacion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Descripcion")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("TiposIdentificacion", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Descripcion = "Cédula de identidad y electoral",
                            Nombre = "Cédula"
                        },
                        new
                        {
                            Id = 2,
                            Descripcion = "Registro Nacional del Contribuyente",
                            Nombre = "RNC"
                        },
                        new
                        {
                            Id = 3,
                            Descripcion = "Pasaporte",
                            Nombre = "Pasaporte"
                        });
                });

            modelBuilder.Entity("SistemaContable.Models.TipoNcf", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Codigo")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("Descripcion")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("TiposNcf", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Codigo = "B01",
                            Nombre = "Factura de Crédito Fiscal"
                        },
                        new
                        {
                            Id = 2,
                            Codigo = "B02",
                            Nombre = "Factura de Consumo"
                        },
                        new
                        {
                            Id = 3,
                            Codigo = "B03",
                            Nombre = "Nota de Débito"
                        },
                        new
                        {
                            Id = 4,
                            Codigo = "B04",
                            Nombre = "Nota de Crédito"
                        });
                });

            modelBuilder.Entity("SistemaContable.Models.TransaccionBanco", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("AsientoContableId")
                        .HasColumnType("integer");

                    b.Property<int?>("BancoDestinoId")
                        .HasColumnType("integer");

                    b.Property<int>("BancoId")
                        .HasColumnType("integer");

                    b.Property<string>("Concepto")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int?>("ConciliacionId")
                        .HasColumnType("integer");

                    b.Property<bool>("Conciliado")
                        .HasColumnType("boolean");

                    b.Property<int?>("ContactoId")
                        .HasColumnType("integer");

                    b.Property<int?>("CuentaContableDestinoId")
                        .HasColumnType("integer");

                    b.Property<string>("Descripcion")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("EmpresaId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("Monto")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Referencia")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("Tipo")
                        .HasColumnType("integer");

                    b.Property<string>("UsuarioCreacion")
                        .HasColumnType("text");

                    b.Property<string>("UsuarioModificacion")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AsientoContableId");

                    b.HasIndex("BancoDestinoId");

                    b.HasIndex("BancoId");

                    b.HasIndex("ConciliacionId");

                    b.HasIndex("ContactoId");

                    b.HasIndex("CuentaContableDestinoId");

                    b.HasIndex("EmpresaId");

                    b.ToTable("TransaccionesBanco");
                });

            modelBuilder.Entity("SistemaContable.Models.Vendedor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activo")
                        .HasColumnType("boolean");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<decimal>("PorcentajeComision")
                        .HasColumnType("decimal(5,2)");

                    b.Property<string>("Telefono")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.ToTable("Vendedores", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Activo = true,
                            Email = "juan@example.com",
                            FechaCreacion = new DateTime(2025, 5, 9, 15, 36, 17, 272, DateTimeKind.Utc).AddTicks(7994),
                            Nombre = "Juan Pérez",
                            PorcentajeComision = 5m,
                            Telefono = "809-555-1234"
                        },
                        new
                        {
                            Id = 2,
                            Activo = true,
                            Email = "maria@example.com",
                            FechaCreacion = new DateTime(2025, 5, 9, 15, 36, 17, 272, DateTimeKind.Utc).AddTicks(8010),
                            Nombre = "María González",
                            PorcentajeComision = 7m,
                            Telefono = "809-555-5678"
                        });
                });

            modelBuilder.Entity("SistemaContable.Models.AjusteConciliacion", b =>
                {
                    b.HasOne("SistemaContable.Models.AsientoContable", "AsientoContable")
                        .WithMany()
                        .HasForeignKey("AsientoContableId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("SistemaContable.Models.ConciliacionBancaria", "Conciliacion")
                        .WithMany("Ajustes")
                        .HasForeignKey("ConciliacionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AsientoContable");

                    b.Navigation("Conciliacion");
                });

            modelBuilder.Entity("SistemaContable.Models.AsientoContable", b =>
                {
                    b.HasOne("SistemaContable.Models.Empresa", "Empresa")
                        .WithMany()
                        .HasForeignKey("EmpresaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Empresa");
                });

            modelBuilder.Entity("SistemaContable.Models.Banco", b =>
                {
                    b.HasOne("SistemaContable.Models.CuentaContable", "CuentaContable")
                        .WithMany()
                        .HasForeignKey("CuentaContableId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SistemaContable.Models.Empresa", "Empresa")
                        .WithMany()
                        .HasForeignKey("EmpresaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CuentaContable");

                    b.Navigation("Empresa");
                });

            modelBuilder.Entity("SistemaContable.Models.Cliente", b =>
                {
                    b.HasOne("SistemaContable.Models.CuentaContable", "CuentaPorCobrar")
                        .WithMany()
                        .HasForeignKey("CuentaPorCobrarId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("SistemaContable.Models.CuentaContable", "CuentaPorPagar")
                        .WithMany()
                        .HasForeignKey("CuentaPorPagarId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("SistemaContable.Models.ListaPrecio", "ListaPrecio")
                        .WithMany()
                        .HasForeignKey("ListaPrecioId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("SistemaContable.Models.Municipio", "Municipio")
                        .WithMany()
                        .HasForeignKey("MunicipioId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("SistemaContable.Models.Pais", "Pais")
                        .WithMany()
                        .HasForeignKey("PaisId");

                    b.HasOne("SistemaContable.Models.PlazoPago", "PlazoPago")
                        .WithMany()
                        .HasForeignKey("PlazoPagoId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("SistemaContable.Models.TipoIdentificacion", "TipoIdentificacion")
                        .WithMany()
                        .HasForeignKey("TipoIdentificacionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SistemaContable.Models.ComprobanteFiscal", "TipoNcf")
                        .WithMany()
                        .HasForeignKey("TipoNcfId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("SistemaContable.Models.Vendedor", "Vendedor")
                        .WithMany()
                        .HasForeignKey("VendedorId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("CuentaPorCobrar");

                    b.Navigation("CuentaPorPagar");

                    b.Navigation("ListaPrecio");

                    b.Navigation("Municipio");

                    b.Navigation("Pais");

                    b.Navigation("PlazoPago");

                    b.Navigation("TipoIdentificacion");

                    b.Navigation("TipoNcf");

                    b.Navigation("Vendedor");
                });

            modelBuilder.Entity("SistemaContable.Models.ConciliacionBancaria", b =>
                {
                    b.HasOne("SistemaContable.Models.Banco", "Banco")
                        .WithMany("Conciliaciones")
                        .HasForeignKey("BancoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SistemaContable.Models.Empresa", "Empresa")
                        .WithMany()
                        .HasForeignKey("EmpresaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Banco");

                    b.Navigation("Empresa");
                });

            modelBuilder.Entity("SistemaContable.Models.Contacto", b =>
                {
                    b.HasOne("SistemaContable.Models.Empresa", "Empresa")
                        .WithMany()
                        .HasForeignKey("EmpresaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Empresa");
                });

            modelBuilder.Entity("SistemaContable.Models.CuentaContable", b =>
                {
                    b.HasOne("SistemaContable.Models.CuentaContable", "CuentaPadre")
                        .WithMany("SubCuentas")
                        .HasForeignKey("CuentaPadreId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SistemaContable.Models.Empresa", "Empresa")
                        .WithMany()
                        .HasForeignKey("EmpresaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CuentaPadre");

                    b.Navigation("Empresa");
                });

            modelBuilder.Entity("SistemaContable.Models.DetalleAsientoContable", b =>
                {
                    b.HasOne("SistemaContable.Models.AsientoContable", "AsientoContable")
                        .WithMany("Detalles")
                        .HasForeignKey("AsientoContableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SistemaContable.Models.Contacto", "Contacto")
                        .WithMany()
                        .HasForeignKey("ContactoId");

                    b.HasOne("SistemaContable.Models.CuentaContable", "CuentaContable")
                        .WithMany()
                        .HasForeignKey("CuentaContableId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AsientoContable");

                    b.Navigation("Contacto");

                    b.Navigation("CuentaContable");
                });

            modelBuilder.Entity("SistemaContable.Models.EntradaDiario", b =>
                {
                    b.HasOne("SistemaContable.Models.NumeracionEntradaDiario", "Numeracion")
                        .WithMany("EntradasDiario")
                        .HasForeignKey("NumeracionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SistemaContable.Models.TipoEntradaDiario", "TipoEntrada")
                        .WithMany("EntradasDiario")
                        .HasForeignKey("TipoEntradaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Numeracion");

                    b.Navigation("TipoEntrada");
                });

            modelBuilder.Entity("SistemaContable.Models.Impuesto", b =>
                {
                    b.HasOne("SistemaContable.Models.CuentaContable", "CuentaContableCompras")
                        .WithMany()
                        .HasForeignKey("CuentaContableComprasId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SistemaContable.Models.CuentaContable", "CuentaContableVentas")
                        .WithMany()
                        .HasForeignKey("CuentaContableVentasId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SistemaContable.Models.Empresa", "Empresa")
                        .WithMany()
                        .HasForeignKey("EmpresaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CuentaContableCompras");

                    b.Navigation("CuentaContableVentas");

                    b.Navigation("Empresa");
                });

            modelBuilder.Entity("SistemaContable.Models.MovimientoContable", b =>
                {
                    b.HasOne("SistemaContable.Models.Cliente", "Contacto")
                        .WithMany()
                        .HasForeignKey("ContactoId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("SistemaContable.Models.CuentaContable", "CuentaContable")
                        .WithMany()
                        .HasForeignKey("CuentaContableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SistemaContable.Models.EntradaDiario", "EntradaDiario")
                        .WithMany("Movimientos")
                        .HasForeignKey("EntradaDiarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contacto");

                    b.Navigation("CuentaContable");

                    b.Navigation("EntradaDiario");
                });

            modelBuilder.Entity("SistemaContable.Models.Municipio", b =>
                {
                    b.HasOne("SistemaContable.Models.Provincia", "Provincia")
                        .WithMany()
                        .HasForeignKey("ProvinciaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Provincia");
                });

            modelBuilder.Entity("SistemaContable.Models.NumeracionEntradaDiario", b =>
                {
                    b.HasOne("SistemaContable.Models.TipoEntradaDiario", "TipoEntradaDiario")
                        .WithMany("Numeraciones")
                        .HasForeignKey("TipoEntradaDiarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TipoEntradaDiario");
                });

            modelBuilder.Entity("SistemaContable.Models.SaldoInicial", b =>
                {
                    b.HasOne("SistemaContable.Models.Contacto", "Contacto")
                        .WithMany()
                        .HasForeignKey("ContactoId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("SistemaContable.Models.CuentaContable", "CuentaContable")
                        .WithMany()
                        .HasForeignKey("CuentaContableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SistemaContable.Models.Empresa", "Empresa")
                        .WithMany()
                        .HasForeignKey("EmpresaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contacto");

                    b.Navigation("CuentaContable");

                    b.Navigation("Empresa");
                });

            modelBuilder.Entity("SistemaContable.Models.TransaccionBanco", b =>
                {
                    b.HasOne("SistemaContable.Models.AsientoContable", "AsientoContable")
                        .WithMany()
                        .HasForeignKey("AsientoContableId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("SistemaContable.Models.Banco", "BancoDestino")
                        .WithMany()
                        .HasForeignKey("BancoDestinoId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SistemaContable.Models.Banco", "Banco")
                        .WithMany("Transacciones")
                        .HasForeignKey("BancoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SistemaContable.Models.ConciliacionBancaria", "Conciliacion")
                        .WithMany("TransaccionesConciliadas")
                        .HasForeignKey("ConciliacionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SistemaContable.Models.Contacto", "Contacto")
                        .WithMany()
                        .HasForeignKey("ContactoId");

                    b.HasOne("SistemaContable.Models.CuentaContable", "CuentaContableDestino")
                        .WithMany()
                        .HasForeignKey("CuentaContableDestinoId");

                    b.HasOne("SistemaContable.Models.Empresa", "Empresa")
                        .WithMany()
                        .HasForeignKey("EmpresaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AsientoContable");

                    b.Navigation("Banco");

                    b.Navigation("BancoDestino");

                    b.Navigation("Conciliacion");

                    b.Navigation("Contacto");

                    b.Navigation("CuentaContableDestino");

                    b.Navigation("Empresa");
                });

            modelBuilder.Entity("SistemaContable.Models.AsientoContable", b =>
                {
                    b.Navigation("Detalles");
                });

            modelBuilder.Entity("SistemaContable.Models.Banco", b =>
                {
                    b.Navigation("Conciliaciones");

                    b.Navigation("Transacciones");
                });

            modelBuilder.Entity("SistemaContable.Models.ConciliacionBancaria", b =>
                {
                    b.Navigation("Ajustes");

                    b.Navigation("TransaccionesConciliadas");
                });

            modelBuilder.Entity("SistemaContable.Models.CuentaContable", b =>
                {
                    b.Navigation("SubCuentas");
                });

            modelBuilder.Entity("SistemaContable.Models.EntradaDiario", b =>
                {
                    b.Navigation("Movimientos");
                });

            modelBuilder.Entity("SistemaContable.Models.NumeracionEntradaDiario", b =>
                {
                    b.Navigation("EntradasDiario");
                });

            modelBuilder.Entity("SistemaContable.Models.TipoEntradaDiario", b =>
                {
                    b.Navigation("EntradasDiario");

                    b.Navigation("Numeraciones");
                });
#pragma warning restore 612, 618
        }
    }
}
