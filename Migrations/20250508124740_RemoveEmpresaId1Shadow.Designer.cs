// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SistemaContable.Data;

#nullable disable

namespace SistemaContable.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250508124740_RemoveEmpresaId1Shadow")]
    partial class RemoveEmpresaId1Shadow
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("SistemaContable.Models.AjusteConciliacion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Aplicado")
                        .HasColumnType("boolean");

                    b.Property<int?>("AsientoContableId")
                        .HasColumnType("integer");

                    b.Property<string>("Concepto")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("ConciliacionId")
                        .HasColumnType("integer");

                    b.Property<string>("Descripcion")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("Monto")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Tipo")
                        .HasColumnType("integer");

                    b.Property<string>("UsuarioCreacion")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AsientoContableId");

                    b.HasIndex("ConciliacionId");

                    b.ToTable("AjustesConciliacion");
                });

            modelBuilder.Entity("SistemaContable.Models.AsientoContable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Concepto")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<bool>("Contabilizado")
                        .HasColumnType("boolean");

                    b.Property<string>("Descripcion")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("EmpresaId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("FechaContabilizacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("MontoTotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Numero")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("OrigenDocumento")
                        .HasColumnType("text");

                    b.Property<int?>("OrigenId")
                        .HasColumnType("integer");

                    b.Property<int>("Tipo")
                        .HasColumnType("integer");

                    b.Property<string>("UsuarioCreacion")
                        .HasColumnType("text");

                    b.Property<string>("UsuarioModificacion")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("EmpresaId");

                    b.ToTable("AsientosContables");
                });

            modelBuilder.Entity("SistemaContable.Models.Banco", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activo")
                        .HasColumnType("boolean");

                    b.Property<int>("CuentaContableId")
                        .HasColumnType("integer");

                    b.Property<string>("Descripcion")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("EmpresaId")
                        .HasColumnType("integer");

                    b.Property<string>("EntidadBancaria")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("FechaApertura")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LogoUrl")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Moneda")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("NumeroCuenta")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<decimal>("SaldoActual")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("SaldoConciliado")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("SaldoInicial")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("TipoCuenta")
                        .HasColumnType("integer");

                    b.Property<string>("UsuarioCreacion")
                        .HasColumnType("text");

                    b.Property<string>("UsuarioModificacion")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CuentaContableId");

                    b.HasIndex("EmpresaId");

                    b.ToTable("Bancos");
                });

            modelBuilder.Entity("SistemaContable.Models.ConciliacionBancaria", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BancoId")
                        .HasColumnType("integer");

                    b.Property<decimal>("DiferenciaConciliacion")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("EmpresaId")
                        .HasColumnType("integer");

                    b.Property<int>("Estado")
                        .HasColumnType("integer");

                    b.Property<DateTime>("FechaConciliacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("FechaFin")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("FechaInicio")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Notas")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<decimal>("SaldoSegunBanco")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("SaldoSegunLibro")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UsuarioCreacion")
                        .HasColumnType("text");

                    b.Property<string>("UsuarioModificacion")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BancoId");

                    b.HasIndex("EmpresaId");

                    b.ToTable("ConciliacionesBancarias");
                });

            modelBuilder.Entity("SistemaContable.Models.Contacto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activo")
                        .HasColumnType("boolean");

                    b.Property<string>("Direccion")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<int>("EmpresaId")
                        .HasColumnType("integer");

                    b.Property<bool>("EsCliente")
                        .HasColumnType("boolean");

                    b.Property<bool>("EsProveedor")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("FechaModificacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Identificacion")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Telefono")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("EmpresaId");

                    b.ToTable("Contactos");
                });

            modelBuilder.Entity("SistemaContable.Models.CuentaContable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activo")
                        .HasColumnType("boolean");

                    b.Property<string>("Categoria")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<int?>("CuentaPadreId")
                        .HasColumnType("integer");

                    b.Property<string>("Descripcion")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("EmpresaId")
                        .HasColumnType("integer");

                    b.Property<int?>("EmpresaId1")
                        .HasColumnType("integer");

                    b.Property<bool>("EsCuentaSistema")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Naturaleza")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Nivel")
                        .HasColumnType("integer");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("Orden")
                        .HasColumnType("integer");

                    b.Property<string>("TipoCuenta")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UsoCuenta")
                        .HasColumnType("text");

                    b.Property<bool>("VerSaldoPorTercero")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("CuentaPadreId");

                    b.HasIndex("EmpresaId");

                    b.HasIndex("EmpresaId1");

                    b.ToTable("CuentasContables");
                });

            modelBuilder.Entity("SistemaContable.Models.DetalleAsientoContable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AsientoContableId")
                        .HasColumnType("integer");

                    b.Property<string>("Concepto")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int?>("ContactoId")
                        .HasColumnType("integer");

                    b.Property<int>("CuentaContableId")
                        .HasColumnType("integer");

                    b.Property<decimal>("Debe")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Haber")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("AsientoContableId");

                    b.HasIndex("ContactoId");

                    b.HasIndex("CuentaContableId");

                    b.ToTable("DetallesAsientoContable");
                });

            modelBuilder.Entity("SistemaContable.Models.Empresa", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activo")
                        .HasColumnType("boolean");

                    b.Property<string>("Ciudad")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("CodigoPostal")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime?>("FechaActualizacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LogoUrl")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("MonedaPrincipal")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("NombreComercial")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("NumeroEmpleados")
                        .HasColumnType("integer");

                    b.Property<string>("NumeroIdentificacion")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Pais")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("PrecisionDecimal")
                        .HasColumnType("integer");

                    b.Property<string>("Provincia")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("ResponsabilidadTributaria")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("SeparadorDecimal")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)");

                    b.Property<string>("SitioWeb")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("TipoIdentificacion")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.ToTable("Empresas", (string)null);
                });

            modelBuilder.Entity("SistemaContable.Models.Impuesto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activo")
                        .HasColumnType("boolean");

                    b.Property<int>("CuentaContableComprasId")
                        .HasColumnType("integer");

                    b.Property<int>("CuentaContableVentasId")
                        .HasColumnType("integer");

                    b.Property<string>("Descripcion")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("EmpresaId")
                        .HasColumnType("integer");

                    b.Property<bool>("EsAcreditable")
                        .HasColumnType("boolean");

                    b.Property<bool>("EstaEnUso")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<decimal?>("Porcentaje")
                        .HasPrecision(5, 2)
                        .HasColumnType("numeric(5,2)");

                    b.Property<int>("Tipo")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CuentaContableComprasId");

                    b.HasIndex("CuentaContableVentasId");

                    b.HasIndex("EmpresaId");

                    b.ToTable("Impuestos", (string)null);
                });

            modelBuilder.Entity("SistemaContable.Models.PlazoPago", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("Dias")
                        .HasColumnType("integer");

                    b.Property<bool>("EsVencimientoManual")
                        .HasColumnType("boolean");

                    b.Property<bool>("EstaEnUso")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("PlazosPago", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Dias = 0,
                            EsVencimientoManual = false,
                            EstaEnUso = false,
                            FechaCreacion = new DateTime(2025, 5, 8, 12, 47, 40, 134, DateTimeKind.Utc).AddTicks(6716),
                            Nombre = "De contado"
                        },
                        new
                        {
                            Id = 2,
                            Dias = 8,
                            EsVencimientoManual = false,
                            EstaEnUso = false,
                            FechaCreacion = new DateTime(2025, 5, 8, 12, 47, 40, 134, DateTimeKind.Utc).AddTicks(6719),
                            Nombre = "8 días"
                        },
                        new
                        {
                            Id = 3,
                            Dias = 15,
                            EsVencimientoManual = false,
                            EstaEnUso = false,
                            FechaCreacion = new DateTime(2025, 5, 8, 12, 47, 40, 134, DateTimeKind.Utc).AddTicks(6721),
                            Nombre = "15 días"
                        },
                        new
                        {
                            Id = 4,
                            Dias = 30,
                            EsVencimientoManual = false,
                            EstaEnUso = false,
                            FechaCreacion = new DateTime(2025, 5, 8, 12, 47, 40, 134, DateTimeKind.Utc).AddTicks(6722),
                            Nombre = "30 días"
                        },
                        new
                        {
                            Id = 5,
                            Dias = 60,
                            EsVencimientoManual = false,
                            EstaEnUso = false,
                            FechaCreacion = new DateTime(2025, 5, 8, 12, 47, 40, 134, DateTimeKind.Utc).AddTicks(6724),
                            Nombre = "60 días"
                        },
                        new
                        {
                            Id = 6,
                            EsVencimientoManual = true,
                            EstaEnUso = false,
                            FechaCreacion = new DateTime(2025, 5, 8, 12, 47, 40, 134, DateTimeKind.Utc).AddTicks(6726),
                            Nombre = "Vencimiento manual"
                        });
                });

            modelBuilder.Entity("SistemaContable.Models.SaldoInicial", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("ContactoId")
                        .HasColumnType("integer");

                    b.Property<int>("CuentaContableId")
                        .HasColumnType("integer");

                    b.Property<int>("EmpresaId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("FechaInicial")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("Valor")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("ContactoId");

                    b.HasIndex("CuentaContableId");

                    b.HasIndex("EmpresaId");

                    b.ToTable("SaldosIniciales");
                });

            modelBuilder.Entity("SistemaContable.Models.TransaccionBanco", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("AsientoContableId")
                        .HasColumnType("integer");

                    b.Property<int?>("BancoDestinoId")
                        .HasColumnType("integer");

                    b.Property<int>("BancoId")
                        .HasColumnType("integer");

                    b.Property<string>("Concepto")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int?>("ConciliacionId")
                        .HasColumnType("integer");

                    b.Property<bool>("Conciliado")
                        .HasColumnType("boolean");

                    b.Property<int?>("ContactoId")
                        .HasColumnType("integer");

                    b.Property<int?>("CuentaContableDestinoId")
                        .HasColumnType("integer");

                    b.Property<string>("Descripcion")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("EmpresaId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("Monto")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Referencia")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("Tipo")
                        .HasColumnType("integer");

                    b.Property<string>("UsuarioCreacion")
                        .HasColumnType("text");

                    b.Property<string>("UsuarioModificacion")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AsientoContableId");

                    b.HasIndex("BancoDestinoId");

                    b.HasIndex("BancoId");

                    b.HasIndex("ConciliacionId");

                    b.HasIndex("ContactoId");

                    b.HasIndex("CuentaContableDestinoId");

                    b.HasIndex("EmpresaId");

                    b.ToTable("TransaccionesBanco");
                });

            modelBuilder.Entity("SistemaContable.Models.AjusteConciliacion", b =>
                {
                    b.HasOne("SistemaContable.Models.AsientoContable", "AsientoContable")
                        .WithMany()
                        .HasForeignKey("AsientoContableId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("SistemaContable.Models.ConciliacionBancaria", "Conciliacion")
                        .WithMany("Ajustes")
                        .HasForeignKey("ConciliacionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AsientoContable");

                    b.Navigation("Conciliacion");
                });

            modelBuilder.Entity("SistemaContable.Models.AsientoContable", b =>
                {
                    b.HasOne("SistemaContable.Models.Empresa", "Empresa")
                        .WithMany()
                        .HasForeignKey("EmpresaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Empresa");
                });

            modelBuilder.Entity("SistemaContable.Models.Banco", b =>
                {
                    b.HasOne("SistemaContable.Models.CuentaContable", "CuentaContable")
                        .WithMany()
                        .HasForeignKey("CuentaContableId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SistemaContable.Models.Empresa", "Empresa")
                        .WithMany()
                        .HasForeignKey("EmpresaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CuentaContable");

                    b.Navigation("Empresa");
                });

            modelBuilder.Entity("SistemaContable.Models.ConciliacionBancaria", b =>
                {
                    b.HasOne("SistemaContable.Models.Banco", "Banco")
                        .WithMany("Conciliaciones")
                        .HasForeignKey("BancoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SistemaContable.Models.Empresa", "Empresa")
                        .WithMany()
                        .HasForeignKey("EmpresaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Banco");

                    b.Navigation("Empresa");
                });

            modelBuilder.Entity("SistemaContable.Models.Contacto", b =>
                {
                    b.HasOne("SistemaContable.Models.Empresa", "Empresa")
                        .WithMany()
                        .HasForeignKey("EmpresaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Empresa");
                });

            modelBuilder.Entity("SistemaContable.Models.CuentaContable", b =>
                {
                    b.HasOne("SistemaContable.Models.CuentaContable", "CuentaPadre")
                        .WithMany("SubCuentas")
                        .HasForeignKey("CuentaPadreId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SistemaContable.Models.Empresa", "Empresa")
                        .WithMany()
                        .HasForeignKey("EmpresaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SistemaContable.Models.Empresa", null)
                        .WithMany("CuentasContables")
                        .HasForeignKey("EmpresaId1");

                    b.Navigation("CuentaPadre");

                    b.Navigation("Empresa");
                });

            modelBuilder.Entity("SistemaContable.Models.DetalleAsientoContable", b =>
                {
                    b.HasOne("SistemaContable.Models.AsientoContable", "AsientoContable")
                        .WithMany("Detalles")
                        .HasForeignKey("AsientoContableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SistemaContable.Models.Contacto", "Contacto")
                        .WithMany()
                        .HasForeignKey("ContactoId");

                    b.HasOne("SistemaContable.Models.CuentaContable", "CuentaContable")
                        .WithMany()
                        .HasForeignKey("CuentaContableId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AsientoContable");

                    b.Navigation("Contacto");

                    b.Navigation("CuentaContable");
                });

            modelBuilder.Entity("SistemaContable.Models.Impuesto", b =>
                {
                    b.HasOne("SistemaContable.Models.CuentaContable", "CuentaContableCompras")
                        .WithMany()
                        .HasForeignKey("CuentaContableComprasId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SistemaContable.Models.CuentaContable", "CuentaContableVentas")
                        .WithMany()
                        .HasForeignKey("CuentaContableVentasId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SistemaContable.Models.Empresa", "Empresa")
                        .WithMany()
                        .HasForeignKey("EmpresaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CuentaContableCompras");

                    b.Navigation("CuentaContableVentas");

                    b.Navigation("Empresa");
                });

            modelBuilder.Entity("SistemaContable.Models.SaldoInicial", b =>
                {
                    b.HasOne("SistemaContable.Models.Contacto", "Contacto")
                        .WithMany()
                        .HasForeignKey("ContactoId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("SistemaContable.Models.CuentaContable", "CuentaContable")
                        .WithMany()
                        .HasForeignKey("CuentaContableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SistemaContable.Models.Empresa", "Empresa")
                        .WithMany()
                        .HasForeignKey("EmpresaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contacto");

                    b.Navigation("CuentaContable");

                    b.Navigation("Empresa");
                });

            modelBuilder.Entity("SistemaContable.Models.TransaccionBanco", b =>
                {
                    b.HasOne("SistemaContable.Models.AsientoContable", "AsientoContable")
                        .WithMany()
                        .HasForeignKey("AsientoContableId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("SistemaContable.Models.Banco", "BancoDestino")
                        .WithMany()
                        .HasForeignKey("BancoDestinoId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SistemaContable.Models.Banco", "Banco")
                        .WithMany("Transacciones")
                        .HasForeignKey("BancoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SistemaContable.Models.ConciliacionBancaria", "Conciliacion")
                        .WithMany("TransaccionesConciliadas")
                        .HasForeignKey("ConciliacionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SistemaContable.Models.Contacto", "Contacto")
                        .WithMany()
                        .HasForeignKey("ContactoId");

                    b.HasOne("SistemaContable.Models.CuentaContable", "CuentaContableDestino")
                        .WithMany()
                        .HasForeignKey("CuentaContableDestinoId");

                    b.HasOne("SistemaContable.Models.Empresa", "Empresa")
                        .WithMany()
                        .HasForeignKey("EmpresaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AsientoContable");

                    b.Navigation("Banco");

                    b.Navigation("BancoDestino");

                    b.Navigation("Conciliacion");

                    b.Navigation("Contacto");

                    b.Navigation("CuentaContableDestino");

                    b.Navigation("Empresa");
                });

            modelBuilder.Entity("SistemaContable.Models.AsientoContable", b =>
                {
                    b.Navigation("Detalles");
                });

            modelBuilder.Entity("SistemaContable.Models.Banco", b =>
                {
                    b.Navigation("Conciliaciones");

                    b.Navigation("Transacciones");
                });

            modelBuilder.Entity("SistemaContable.Models.ConciliacionBancaria", b =>
                {
                    b.Navigation("Ajustes");

                    b.Navigation("TransaccionesConciliadas");
                });

            modelBuilder.Entity("SistemaContable.Models.CuentaContable", b =>
                {
                    b.Navigation("SubCuentas");
                });

            modelBuilder.Entity("SistemaContable.Models.Empresa", b =>
                {
                    b.Navigation("CuentasContables");
                });
#pragma warning restore 612, 618
        }
    }
}
